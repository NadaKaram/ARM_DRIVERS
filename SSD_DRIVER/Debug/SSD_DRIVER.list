
SSD_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000c3c  08000c3c  00010c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c6c  08000c6c  00010c74  2**0
                  CONTENTS
  4 .ARM          00000000  08000c6c  08000c6c  00010c74  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c6c  08000c74  00010c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c6c  08000c6c  00010c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c70  08000c70  00010c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000c74  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000c74  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010c74  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006cd  00000000  00000000  00010c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000039b  00000000  00000000  00011369  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000120  00000000  00000000  00011708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b8  00000000  00000000  00011828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000ef9  00000000  00000000  000118e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000005a5  00000000  00000000  000127d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000039d8  00000000  00000000  00012d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00016756  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000244  00000000  00000000  000167d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000c24 	.word	0x08000c24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000c24 	.word	0x08000c24

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <M_DIO_void_setPinDir>:
#include	"DIO_interface.h"
#include	"DIO_private.h"


void	M_DIO_void_setPinDir(u8 PortId, u8 PinId, u8 Direction)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	0004      	movs	r4, r0
 8000228:	0008      	movs	r0, r1
 800022a:	0011      	movs	r1, r2
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	1c22      	adds	r2, r4, #0
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	1dbb      	adds	r3, r7, #6
 8000234:	1c02      	adds	r2, r0, #0
 8000236:	701a      	strb	r2, [r3, #0]
 8000238:	1d7b      	adds	r3, r7, #5
 800023a:	1c0a      	adds	r2, r1, #0
 800023c:	701a      	strb	r2, [r3, #0]
	/*	Range Check						*/
	if(PortId<3 && PinId < 16 && Direction < 16)
 800023e:	1dfb      	adds	r3, r7, #7
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b02      	cmp	r3, #2
 8000244:	d900      	bls.n	8000248 <M_DIO_void_setPinDir+0x28>
 8000246:	e0cb      	b.n	80003e0 <M_DIO_void_setPinDir+0x1c0>
 8000248:	1dbb      	adds	r3, r7, #6
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b0f      	cmp	r3, #15
 800024e:	d900      	bls.n	8000252 <M_DIO_void_setPinDir+0x32>
 8000250:	e0c6      	b.n	80003e0 <M_DIO_void_setPinDir+0x1c0>
 8000252:	1d7b      	adds	r3, r7, #5
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b0f      	cmp	r3, #15
 8000258:	d900      	bls.n	800025c <M_DIO_void_setPinDir+0x3c>
 800025a:	e0c1      	b.n	80003e0 <M_DIO_void_setPinDir+0x1c0>
	{
		if(PinId < 8) /*	Pin0 : Pin7 ==> CRL	*/
 800025c:	1dbb      	adds	r3, r7, #6
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b07      	cmp	r3, #7
 8000262:	d85a      	bhi.n	800031a <M_DIO_void_setPinDir+0xfa>
		{
			switch(PortId)
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d01f      	beq.n	80002ac <M_DIO_void_setPinDir+0x8c>
 800026c:	2b02      	cmp	r3, #2
 800026e:	d038      	beq.n	80002e2 <M_DIO_void_setPinDir+0xc2>
 8000270:	2b00      	cmp	r3, #0
 8000272:	d000      	beq.n	8000276 <M_DIO_void_setPinDir+0x56>
		}
		else{/*		Report Error Out of Range			*/	}
	}
	else
	{/*		Report Error 			*/}	
}
 8000274:	e0b4      	b.n	80003e0 <M_DIO_void_setPinDir+0x1c0>
				case PORTA	:	GPIOA_CRL &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 8000276:	4b5c      	ldr	r3, [pc, #368]	; (80003e8 <M_DIO_void_setPinDir+0x1c8>)
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	1dbb      	adds	r3, r7, #6
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	210f      	movs	r1, #15
 8000282:	4099      	lsls	r1, r3
 8000284:	000b      	movs	r3, r1
 8000286:	43db      	mvns	r3, r3
 8000288:	0019      	movs	r1, r3
 800028a:	4b57      	ldr	r3, [pc, #348]	; (80003e8 <M_DIO_void_setPinDir+0x1c8>)
 800028c:	400a      	ands	r2, r1
 800028e:	601a      	str	r2, [r3, #0]
								GPIOA_CRL |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 8000290:	4b55      	ldr	r3, [pc, #340]	; (80003e8 <M_DIO_void_setPinDir+0x1c8>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	1d7b      	adds	r3, r7, #5
 8000296:	7819      	ldrb	r1, [r3, #0]
 8000298:	1dbb      	adds	r3, r7, #6
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	4099      	lsls	r1, r3
 80002a0:	000b      	movs	r3, r1
 80002a2:	0019      	movs	r1, r3
 80002a4:	4b50      	ldr	r3, [pc, #320]	; (80003e8 <M_DIO_void_setPinDir+0x1c8>)
 80002a6:	430a      	orrs	r2, r1
 80002a8:	601a      	str	r2, [r3, #0]
								break;
 80002aa:	e099      	b.n	80003e0 <M_DIO_void_setPinDir+0x1c0>
				case PORTB	:	GPIOB_CRL &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 80002ac:	4b4f      	ldr	r3, [pc, #316]	; (80003ec <M_DIO_void_setPinDir+0x1cc>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	1dbb      	adds	r3, r7, #6
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	210f      	movs	r1, #15
 80002b8:	4099      	lsls	r1, r3
 80002ba:	000b      	movs	r3, r1
 80002bc:	43db      	mvns	r3, r3
 80002be:	0019      	movs	r1, r3
 80002c0:	4b4a      	ldr	r3, [pc, #296]	; (80003ec <M_DIO_void_setPinDir+0x1cc>)
 80002c2:	400a      	ands	r2, r1
 80002c4:	601a      	str	r2, [r3, #0]
								GPIOB_CRL |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 80002c6:	4b49      	ldr	r3, [pc, #292]	; (80003ec <M_DIO_void_setPinDir+0x1cc>)
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	1d7b      	adds	r3, r7, #5
 80002cc:	7819      	ldrb	r1, [r3, #0]
 80002ce:	1dbb      	adds	r3, r7, #6
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	4099      	lsls	r1, r3
 80002d6:	000b      	movs	r3, r1
 80002d8:	0019      	movs	r1, r3
 80002da:	4b44      	ldr	r3, [pc, #272]	; (80003ec <M_DIO_void_setPinDir+0x1cc>)
 80002dc:	430a      	orrs	r2, r1
 80002de:	601a      	str	r2, [r3, #0]
								break;
 80002e0:	e07e      	b.n	80003e0 <M_DIO_void_setPinDir+0x1c0>
				case PORTC	:	GPIOC_CRL &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 80002e2:	4b43      	ldr	r3, [pc, #268]	; (80003f0 <M_DIO_void_setPinDir+0x1d0>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	1dbb      	adds	r3, r7, #6
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	210f      	movs	r1, #15
 80002ee:	4099      	lsls	r1, r3
 80002f0:	000b      	movs	r3, r1
 80002f2:	43db      	mvns	r3, r3
 80002f4:	0019      	movs	r1, r3
 80002f6:	4b3e      	ldr	r3, [pc, #248]	; (80003f0 <M_DIO_void_setPinDir+0x1d0>)
 80002f8:	400a      	ands	r2, r1
 80002fa:	601a      	str	r2, [r3, #0]
								GPIOC_CRL |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 80002fc:	4b3c      	ldr	r3, [pc, #240]	; (80003f0 <M_DIO_void_setPinDir+0x1d0>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	1d7b      	adds	r3, r7, #5
 8000302:	7819      	ldrb	r1, [r3, #0]
 8000304:	1dbb      	adds	r3, r7, #6
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	4099      	lsls	r1, r3
 800030c:	000b      	movs	r3, r1
 800030e:	0019      	movs	r1, r3
 8000310:	4b37      	ldr	r3, [pc, #220]	; (80003f0 <M_DIO_void_setPinDir+0x1d0>)
 8000312:	430a      	orrs	r2, r1
 8000314:	601a      	str	r2, [r3, #0]
								break;
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	e062      	b.n	80003e0 <M_DIO_void_setPinDir+0x1c0>
		}else if(PinId < 16) /*	Pin8 : Pin15 ==> CRH	*/
 800031a:	1dbb      	adds	r3, r7, #6
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b0f      	cmp	r3, #15
 8000320:	d85e      	bhi.n	80003e0 <M_DIO_void_setPinDir+0x1c0>
			PinId -= 8 ;
 8000322:	1dbb      	adds	r3, r7, #6
 8000324:	1dba      	adds	r2, r7, #6
 8000326:	7812      	ldrb	r2, [r2, #0]
 8000328:	3a08      	subs	r2, #8
 800032a:	701a      	strb	r2, [r3, #0]
			switch(PortId)
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d01f      	beq.n	8000374 <M_DIO_void_setPinDir+0x154>
 8000334:	2b02      	cmp	r3, #2
 8000336:	d038      	beq.n	80003aa <M_DIO_void_setPinDir+0x18a>
 8000338:	2b00      	cmp	r3, #0
 800033a:	d000      	beq.n	800033e <M_DIO_void_setPinDir+0x11e>
}
 800033c:	e050      	b.n	80003e0 <M_DIO_void_setPinDir+0x1c0>
				case PORTA	:	GPIOA_CRH &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 800033e:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <M_DIO_void_setPinDir+0x1d4>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	1dbb      	adds	r3, r7, #6
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	210f      	movs	r1, #15
 800034a:	4099      	lsls	r1, r3
 800034c:	000b      	movs	r3, r1
 800034e:	43db      	mvns	r3, r3
 8000350:	0019      	movs	r1, r3
 8000352:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <M_DIO_void_setPinDir+0x1d4>)
 8000354:	400a      	ands	r2, r1
 8000356:	601a      	str	r2, [r3, #0]
								GPIOA_CRH |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 8000358:	4b26      	ldr	r3, [pc, #152]	; (80003f4 <M_DIO_void_setPinDir+0x1d4>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	1d7b      	adds	r3, r7, #5
 800035e:	7819      	ldrb	r1, [r3, #0]
 8000360:	1dbb      	adds	r3, r7, #6
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	4099      	lsls	r1, r3
 8000368:	000b      	movs	r3, r1
 800036a:	0019      	movs	r1, r3
 800036c:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <M_DIO_void_setPinDir+0x1d4>)
 800036e:	430a      	orrs	r2, r1
 8000370:	601a      	str	r2, [r3, #0]
								break;
 8000372:	e035      	b.n	80003e0 <M_DIO_void_setPinDir+0x1c0>
				case PORTB	:	GPIOB_CRH &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 8000374:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <M_DIO_void_setPinDir+0x1d8>)
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	1dbb      	adds	r3, r7, #6
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	210f      	movs	r1, #15
 8000380:	4099      	lsls	r1, r3
 8000382:	000b      	movs	r3, r1
 8000384:	43db      	mvns	r3, r3
 8000386:	0019      	movs	r1, r3
 8000388:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <M_DIO_void_setPinDir+0x1d8>)
 800038a:	400a      	ands	r2, r1
 800038c:	601a      	str	r2, [r3, #0]
								GPIOB_CRH |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 800038e:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <M_DIO_void_setPinDir+0x1d8>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	1d7b      	adds	r3, r7, #5
 8000394:	7819      	ldrb	r1, [r3, #0]
 8000396:	1dbb      	adds	r3, r7, #6
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	4099      	lsls	r1, r3
 800039e:	000b      	movs	r3, r1
 80003a0:	0019      	movs	r1, r3
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <M_DIO_void_setPinDir+0x1d8>)
 80003a4:	430a      	orrs	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
								break;
 80003a8:	e01a      	b.n	80003e0 <M_DIO_void_setPinDir+0x1c0>
				case PORTC	:	GPIOC_CRH &=	~(0b1111<<(PinId * 4));		/*Clear the 4 bits */
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <M_DIO_void_setPinDir+0x1dc>)
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	1dbb      	adds	r3, r7, #6
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	210f      	movs	r1, #15
 80003b6:	4099      	lsls	r1, r3
 80003b8:	000b      	movs	r3, r1
 80003ba:	43db      	mvns	r3, r3
 80003bc:	0019      	movs	r1, r3
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <M_DIO_void_setPinDir+0x1dc>)
 80003c0:	400a      	ands	r2, r1
 80003c2:	601a      	str	r2, [r3, #0]
								GPIOC_CRH |=	((Direction)<<(PinId * 4));	/*Assign the 4 bits */
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <M_DIO_void_setPinDir+0x1dc>)
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	1d7b      	adds	r3, r7, #5
 80003ca:	7819      	ldrb	r1, [r3, #0]
 80003cc:	1dbb      	adds	r3, r7, #6
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	4099      	lsls	r1, r3
 80003d4:	000b      	movs	r3, r1
 80003d6:	0019      	movs	r1, r3
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <M_DIO_void_setPinDir+0x1dc>)
 80003da:	430a      	orrs	r2, r1
 80003dc:	601a      	str	r2, [r3, #0]
								break;
 80003de:	46c0      	nop			; (mov r8, r8)
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b003      	add	sp, #12
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	40010800 	.word	0x40010800
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	40011000 	.word	0x40011000
 80003f4:	40010804 	.word	0x40010804
 80003f8:	40010c04 	.word	0x40010c04
 80003fc:	40011004 	.word	0x40011004

08000400 <M_DIO_void_setPinVal>:
void	M_DIO_void_setPinVal(u8 PortId, u8 PinId, u8 Value)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	0004      	movs	r4, r0
 8000408:	0008      	movs	r0, r1
 800040a:	0011      	movs	r1, r2
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	1c22      	adds	r2, r4, #0
 8000410:	701a      	strb	r2, [r3, #0]
 8000412:	1dbb      	adds	r3, r7, #6
 8000414:	1c02      	adds	r2, r0, #0
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	1d7b      	adds	r3, r7, #5
 800041a:	1c0a      	adds	r2, r1, #0
 800041c:	701a      	strb	r2, [r3, #0]
	/*	Range Check						*/
	if(PortId<3 && PinId < 16)
 800041e:	1dfb      	adds	r3, r7, #7
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b02      	cmp	r3, #2
 8000424:	d900      	bls.n	8000428 <M_DIO_void_setPinVal+0x28>
 8000426:	e069      	b.n	80004fc <M_DIO_void_setPinVal+0xfc>
 8000428:	1dbb      	adds	r3, r7, #6
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b0f      	cmp	r3, #15
 800042e:	d865      	bhi.n	80004fc <M_DIO_void_setPinVal+0xfc>
	{
		if(Value == DIO_LOW)
 8000430:	1d7b      	adds	r3, r7, #5
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d130      	bne.n	800049a <M_DIO_void_setPinVal+0x9a>
		{
			switch(PortId)
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d011      	beq.n	8000464 <M_DIO_void_setPinVal+0x64>
 8000440:	2b02      	cmp	r3, #2
 8000442:	d01c      	beq.n	800047e <M_DIO_void_setPinVal+0x7e>
 8000444:	2b00      	cmp	r3, #0
 8000446:	d000      	beq.n	800044a <M_DIO_void_setPinVal+0x4a>
		}
		else{/*		Report Error Out of Range			*/	}
	}
	else
	{/*		Report Error 			*/}		
}
 8000448:	e058      	b.n	80004fc <M_DIO_void_setPinVal+0xfc>
				case PORTA	:	CLR_BIT(GPIOA_ODR ,PinId);	break;
 800044a:	4b2e      	ldr	r3, [pc, #184]	; (8000504 <M_DIO_void_setPinVal+0x104>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	1dbb      	adds	r3, r7, #6
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2101      	movs	r1, #1
 8000454:	4099      	lsls	r1, r3
 8000456:	000b      	movs	r3, r1
 8000458:	43db      	mvns	r3, r3
 800045a:	0019      	movs	r1, r3
 800045c:	4b29      	ldr	r3, [pc, #164]	; (8000504 <M_DIO_void_setPinVal+0x104>)
 800045e:	400a      	ands	r2, r1
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	e04b      	b.n	80004fc <M_DIO_void_setPinVal+0xfc>
				case PORTB	:	CLR_BIT(GPIOB_ODR ,PinId);	break;
 8000464:	4b28      	ldr	r3, [pc, #160]	; (8000508 <M_DIO_void_setPinVal+0x108>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	1dbb      	adds	r3, r7, #6
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	4099      	lsls	r1, r3
 8000470:	000b      	movs	r3, r1
 8000472:	43db      	mvns	r3, r3
 8000474:	0019      	movs	r1, r3
 8000476:	4b24      	ldr	r3, [pc, #144]	; (8000508 <M_DIO_void_setPinVal+0x108>)
 8000478:	400a      	ands	r2, r1
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	e03e      	b.n	80004fc <M_DIO_void_setPinVal+0xfc>
				case PORTC	:	CLR_BIT(GPIOC_ODR ,PinId);	break;
 800047e:	4b23      	ldr	r3, [pc, #140]	; (800050c <M_DIO_void_setPinVal+0x10c>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	1dbb      	adds	r3, r7, #6
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2101      	movs	r1, #1
 8000488:	4099      	lsls	r1, r3
 800048a:	000b      	movs	r3, r1
 800048c:	43db      	mvns	r3, r3
 800048e:	0019      	movs	r1, r3
 8000490:	4b1e      	ldr	r3, [pc, #120]	; (800050c <M_DIO_void_setPinVal+0x10c>)
 8000492:	400a      	ands	r2, r1
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	e030      	b.n	80004fc <M_DIO_void_setPinVal+0xfc>
		}else if(Value == DIO_HIGH)
 800049a:	1d7b      	adds	r3, r7, #5
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d12c      	bne.n	80004fc <M_DIO_void_setPinVal+0xfc>
			switch(PortId)
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d010      	beq.n	80004cc <M_DIO_void_setPinVal+0xcc>
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d01a      	beq.n	80004e4 <M_DIO_void_setPinVal+0xe4>
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d000      	beq.n	80004b4 <M_DIO_void_setPinVal+0xb4>
}
 80004b2:	e023      	b.n	80004fc <M_DIO_void_setPinVal+0xfc>
				case PORTA	:	SET_BIT(GPIOA_ODR ,PinId);	break;
 80004b4:	4b13      	ldr	r3, [pc, #76]	; (8000504 <M_DIO_void_setPinVal+0x104>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	4099      	lsls	r1, r3
 80004c0:	000b      	movs	r3, r1
 80004c2:	0019      	movs	r1, r3
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <M_DIO_void_setPinVal+0x104>)
 80004c6:	430a      	orrs	r2, r1
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	e017      	b.n	80004fc <M_DIO_void_setPinVal+0xfc>
				case PORTB	:	SET_BIT(GPIOB_ODR ,PinId);	break;
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <M_DIO_void_setPinVal+0x108>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	1dbb      	adds	r3, r7, #6
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2101      	movs	r1, #1
 80004d6:	4099      	lsls	r1, r3
 80004d8:	000b      	movs	r3, r1
 80004da:	0019      	movs	r1, r3
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <M_DIO_void_setPinVal+0x108>)
 80004de:	430a      	orrs	r2, r1
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	e00b      	b.n	80004fc <M_DIO_void_setPinVal+0xfc>
				case PORTC	:	SET_BIT(GPIOC_ODR ,PinId);	break;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <M_DIO_void_setPinVal+0x10c>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	1dbb      	adds	r3, r7, #6
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2101      	movs	r1, #1
 80004ee:	4099      	lsls	r1, r3
 80004f0:	000b      	movs	r3, r1
 80004f2:	0019      	movs	r1, r3
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <M_DIO_void_setPinVal+0x10c>)
 80004f6:	430a      	orrs	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	46c0      	nop			; (mov r8, r8)
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b003      	add	sp, #12
 8000502:	bd90      	pop	{r4, r7, pc}
 8000504:	4001080c 	.word	0x4001080c
 8000508:	40010c0c 	.word	0x40010c0c
 800050c:	4001100c 	.word	0x4001100c

08000510 <M_DIO_void_getPinVal>:
void	M_DIO_void_getPinVal(u8 PortId, u8 PinId, u8 * Value)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	603a      	str	r2, [r7, #0]
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	1c02      	adds	r2, r0, #0
 800051c:	701a      	strb	r2, [r3, #0]
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	1c0a      	adds	r2, r1, #0
 8000522:	701a      	strb	r2, [r3, #0]
	/*	Range Check						*/
	if(PortId<3 && PinId < 16)
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d833      	bhi.n	8000594 <M_DIO_void_getPinVal+0x84>
 800052c:	1dbb      	adds	r3, r7, #6
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b0f      	cmp	r3, #15
 8000532:	d82f      	bhi.n	8000594 <M_DIO_void_getPinVal+0x84>
	{
			switch(PortId)
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d011      	beq.n	8000560 <M_DIO_void_getPinVal+0x50>
 800053c:	2b02      	cmp	r3, #2
 800053e:	d01c      	beq.n	800057a <M_DIO_void_getPinVal+0x6a>
 8000540:	2b00      	cmp	r3, #0
 8000542:	d000      	beq.n	8000546 <M_DIO_void_getPinVal+0x36>
				case PORTC	:	*Value = GET_BIT(GPIOC_IDR ,PinId);	break;
			}
	}
	else
	{/*		Report Error 			*/}	
}
 8000544:	e026      	b.n	8000594 <M_DIO_void_getPinVal+0x84>
				case PORTA	:	*Value = GET_BIT(GPIOA_IDR ,PinId);	break;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <M_DIO_void_getPinVal+0x8c>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	1dbb      	adds	r3, r7, #6
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	40da      	lsrs	r2, r3
 8000550:	0013      	movs	r3, r2
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2201      	movs	r2, #1
 8000556:	4013      	ands	r3, r2
 8000558:	b2da      	uxtb	r2, r3
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	701a      	strb	r2, [r3, #0]
 800055e:	e019      	b.n	8000594 <M_DIO_void_getPinVal+0x84>
				case PORTB	:	*Value = GET_BIT(GPIOB_IDR ,PinId);	break;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <M_DIO_void_getPinVal+0x90>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	1dbb      	adds	r3, r7, #6
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	40da      	lsrs	r2, r3
 800056a:	0013      	movs	r3, r2
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2201      	movs	r2, #1
 8000570:	4013      	ands	r3, r2
 8000572:	b2da      	uxtb	r2, r3
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	e00c      	b.n	8000594 <M_DIO_void_getPinVal+0x84>
				case PORTC	:	*Value = GET_BIT(GPIOC_IDR ,PinId);	break;
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <M_DIO_void_getPinVal+0x94>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	1dbb      	adds	r3, r7, #6
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	40da      	lsrs	r2, r3
 8000584:	0013      	movs	r3, r2
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2201      	movs	r2, #1
 800058a:	4013      	ands	r3, r2
 800058c:	b2da      	uxtb	r2, r3
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	46c0      	nop			; (mov r8, r8)
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b002      	add	sp, #8
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40010808 	.word	0x40010808
 80005a0:	40010c08 	.word	0x40010c08
 80005a4:	40011008 	.word	0x40011008

080005a8 <_delay_ms>:
 *      Author: abdal
 */
#include "STD_TYPES.h"
#include "Delay.h"
void	_delay_ms(u32 _ms)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	for(u32 i = 0; i < (_ms * 500) ; i++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	e003      	b.n	80005be <_delay_ms+0x16>
	{
		asm("NOP");
 80005b6:	46c0      	nop			; (mov r8, r8)
	for(u32 i = 0; i < (_ms * 500) ; i++)
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	0013      	movs	r3, r2
 80005c2:	015b      	lsls	r3, r3, #5
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	189b      	adds	r3, r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	001a      	movs	r2, r3
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d3f0      	bcc.n	80005b6 <_delay_ms+0xe>
	}
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b004      	add	sp, #16
 80005da:	bd80      	pop	{r7, pc}

080005dc <H_PB_voidinit>:
#include "Delay.h"


/****************  Function Definition  ****************/
void	H_PB_voidinit	(const PB_t * psPB)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	//	Direction for PB is INPUT PULL UP
	M_DIO_void_setPinDir(psPB -> PB_Port, psPB -> PB_Pin, IN_PULL_UP_DOWN);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7858      	ldrb	r0, [r3, #1]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	789b      	ldrb	r3, [r3, #2]
 80005ec:	2208      	movs	r2, #8
 80005ee:	0019      	movs	r1, r3
 80005f0:	f7ff fe16 	bl	8000220 <M_DIO_void_setPinDir>
	M_DIO_void_setPinVal(PORTA, PIN0, DIO_HIGH);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2100      	movs	r1, #0
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff ff01 	bl	8000400 <M_DIO_void_setPinVal>
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b002      	add	sp, #8
 8000604:	bd80      	pop	{r7, pc}

08000606 <H_PB_voidread_1>:
		else
		{}
	}
}
void	H_PB_voidread_1	(PB_t * psPB, u8 * pReturnVal)
{
 8000606:	b590      	push	{r4, r7, lr}
 8000608:	b085      	sub	sp, #20
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
	u8 Local_u8Read;
	if(psPB -> PB_ActiveMode == ACTIVE_LOW)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	78db      	ldrb	r3, [r3, #3]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d12c      	bne.n	8000672 <H_PB_voidread_1+0x6c>
	{
		* pReturnVal = NOT_PRESSED_AL;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
		M_DIO_void_getPinVal(psPB -> PB_Port, psPB -> PB_Pin,& Local_u8Read);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7858      	ldrb	r0, [r3, #1]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	789b      	ldrb	r3, [r3, #2]
 8000626:	240f      	movs	r4, #15
 8000628:	193a      	adds	r2, r7, r4
 800062a:	0019      	movs	r1, r3
 800062c:	f7ff ff70 	bl	8000510 <M_DIO_void_getPinVal>
		if(Local_u8Read != psPB -> PB_InitState)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791a      	ldrb	r2, [r3, #4]
 8000634:	193b      	adds	r3, r7, r4
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	429a      	cmp	r2, r3
 800063a:	d01a      	beq.n	8000672 <H_PB_voidread_1+0x6c>
		{
			_delay_ms(50);
 800063c:	2032      	movs	r0, #50	; 0x32
 800063e:	f7ff ffb3 	bl	80005a8 <_delay_ms>
			M_DIO_void_getPinVal(psPB -> PB_Port, psPB -> PB_Pin,& Local_u8Read);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7858      	ldrb	r0, [r3, #1]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	240f      	movs	r4, #15
 800064c:	193a      	adds	r2, r7, r4
 800064e:	0019      	movs	r1, r3
 8000650:	f7ff ff5e 	bl	8000510 <M_DIO_void_getPinVal>
			if(Local_u8Read == PRESSED_AL)
 8000654:	193b      	adds	r3, r7, r4
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d106      	bne.n	800066a <H_PB_voidread_1+0x64>
			{
				* pReturnVal = PRESSED_AL;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
				psPB -> PB_InitState = PRESSED_AL;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	711a      	strb	r2, [r3, #4]
				return;
 8000668:	e003      	b.n	8000672 <H_PB_voidread_1+0x6c>
			}
			else
			{
				psPB -> PB_InitState = NOT_PRESSED_AL;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2201      	movs	r2, #1
 800066e:	711a      	strb	r2, [r3, #4]
				return;
 8000670:	46c0      	nop			; (mov r8, r8)
			}
		}
		else
		{}
	}
}
 8000672:	46bd      	mov	sp, r7
 8000674:	b005      	add	sp, #20
 8000676:	bd90      	pop	{r4, r7, pc}

08000678 <MRCC_voidSysClkInit>:
#include	"RCC_config.h"



void	MRCC_voidSysClkInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	#if			SYSTEM_CLK	==	RCC_HSI
				SET_BIT(RCC_CR,0);
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MRCC_voidSysClkInit+0x30>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MRCC_voidSysClkInit+0x30>)
 8000682:	2101      	movs	r1, #1
 8000684:	430a      	orrs	r2, r1
 8000686:	601a      	str	r2, [r3, #0]
				CLR_BIT(RCC_CFGR,0);
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MRCC_voidSysClkInit+0x34>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MRCC_voidSysClkInit+0x34>)
 800068e:	2101      	movs	r1, #1
 8000690:	438a      	bics	r2, r1
 8000692:	601a      	str	r2, [r3, #0]
				CLR_BIT(RCC_CFGR,1);
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MRCC_voidSysClkInit+0x34>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <MRCC_voidSysClkInit+0x34>)
 800069a:	2102      	movs	r1, #2
 800069c:	438a      	bics	r2, r1
 800069e:	601a      	str	r2, [r3, #0]
				CLR_BIT(RCC_CFGR,0);
				SET_BIT(RCC_CFGR,1);
	#else
		#error	"Wrong choice of RCC clock type"
	#endif
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40021004 	.word	0x40021004

080006b0 <MRCC_voidEnablePerClk>:
void	MRCC_voidEnablePerClk(u8 PerBus,u8 PerNum)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	0002      	movs	r2, r0
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	1dbb      	adds	r3, r7, #6
 80006be:	1c0a      	adds	r2, r1, #0
 80006c0:	701a      	strb	r2, [r3, #0]
	/*	Range Check						*/
	if(PerNum<32)
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b1f      	cmp	r3, #31
 80006c8:	d82c      	bhi.n	8000724 <MRCC_voidEnablePerClk+0x74>
	{
		switch(PerBus)
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d010      	beq.n	80006f4 <MRCC_voidEnablePerClk+0x44>
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d01a      	beq.n	800070c <MRCC_voidEnablePerClk+0x5c>
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d000      	beq.n	80006dc <MRCC_voidEnablePerClk+0x2c>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
		}
	}
	else
	{/*		Report Error 			*/}	
}
 80006da:	e023      	b.n	8000724 <MRCC_voidEnablePerClk+0x74>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR ,PerNum);	break;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MRCC_voidEnablePerClk+0x7c>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	1dbb      	adds	r3, r7, #6
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2101      	movs	r1, #1
 80006e6:	4099      	lsls	r1, r3
 80006e8:	000b      	movs	r3, r1
 80006ea:	0019      	movs	r1, r3
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MRCC_voidEnablePerClk+0x7c>)
 80006ee:	430a      	orrs	r2, r1
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	e017      	b.n	8000724 <MRCC_voidEnablePerClk+0x74>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerNum);	break;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MRCC_voidEnablePerClk+0x80>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	1dbb      	adds	r3, r7, #6
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2101      	movs	r1, #1
 80006fe:	4099      	lsls	r1, r3
 8000700:	000b      	movs	r3, r1
 8000702:	0019      	movs	r1, r3
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MRCC_voidEnablePerClk+0x80>)
 8000706:	430a      	orrs	r2, r1
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	e00b      	b.n	8000724 <MRCC_voidEnablePerClk+0x74>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MRCC_voidEnablePerClk+0x84>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	1dbb      	adds	r3, r7, #6
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2101      	movs	r1, #1
 8000716:	4099      	lsls	r1, r3
 8000718:	000b      	movs	r3, r1
 800071a:	0019      	movs	r1, r3
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <MRCC_voidEnablePerClk+0x84>)
 800071e:	430a      	orrs	r2, r1
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	46c0      	nop			; (mov r8, r8)
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021014 	.word	0x40021014
 8000730:	4002101c 	.word	0x4002101c
 8000734:	40021018 	.word	0x40021018

08000738 <H_SSD_voidinit>:
#include "SSD_int.h"
#include "Delay.h"

/****************  Function Definition  ****************/
void	H_SSD_voidinit			(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	/* Set all SSD LEDs as OUTPUT */
	M_DIO_void_setPinDir(SSD_LED_A_PORT, SSD_LED_A_PIN , OUT_10MHZ_PP);
 800073c:	2201      	movs	r2, #1
 800073e:	2101      	movs	r1, #1
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff fd6d 	bl	8000220 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_B_PORT, SSD_LED_B_PIN , OUT_10MHZ_PP);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff fd68 	bl	8000220 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_C_PORT, SSD_LED_C_PIN , OUT_10MHZ_PP);
 8000750:	2201      	movs	r2, #1
 8000752:	2103      	movs	r1, #3
 8000754:	2000      	movs	r0, #0
 8000756:	f7ff fd63 	bl	8000220 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_D_PORT, SSD_LED_D_PIN , OUT_10MHZ_PP);
 800075a:	2201      	movs	r2, #1
 800075c:	2104      	movs	r1, #4
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff fd5e 	bl	8000220 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_E_PORT, SSD_LED_E_PIN , OUT_10MHZ_PP);
 8000764:	2201      	movs	r2, #1
 8000766:	2105      	movs	r1, #5
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff fd59 	bl	8000220 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_F_PORT, SSD_LED_F_PIN , OUT_10MHZ_PP);
 800076e:	2201      	movs	r2, #1
 8000770:	2106      	movs	r1, #6
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fd54 	bl	8000220 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_G_PORT, SSD_LED_G_PIN , OUT_10MHZ_PP);
 8000778:	2201      	movs	r2, #1
 800077a:	2107      	movs	r1, #7
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff fd4f 	bl	8000220 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_DOT_PORT, SSD_LED_DOT_PIN , OUT_10MHZ_PP);
 8000782:	2201      	movs	r2, #1
 8000784:	2108      	movs	r1, #8
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff fd4a 	bl	8000220 <M_DIO_void_setPinDir>
	/* Set SSD_1 EN pin as OUTPUT */
	M_DIO_void_setPinDir(SSD_LED_1_EN_PORT, SSD_LED_1_EN_PIN , OUT_10MHZ_PP);
 800078c:	2201      	movs	r2, #1
 800078e:	2109      	movs	r1, #9
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff fd45 	bl	8000220 <M_DIO_void_setPinDir>
	/* Set SSD_2 EN pin as OUTPUT */
	M_DIO_void_setPinDir(SSD_LED_2_EN_PORT, SSD_LED_2_EN_PIN , OUT_10MHZ_PP);
 8000796:	2201      	movs	r2, #1
 8000798:	210a      	movs	r1, #10
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff fd40 	bl	8000220 <M_DIO_void_setPinDir>
	/* Disable 2 SSDs */
	M_DIO_void_setPinVal(SSD_LED_1_EN_PORT, SSD_LED_1_EN_PIN , DIO_LOW );
 80007a0:	2200      	movs	r2, #0
 80007a2:	2109      	movs	r1, #9
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff fe2b 	bl	8000400 <M_DIO_void_setPinVal>
	M_DIO_void_setPinVal(SSD_LED_2_EN_PORT, SSD_LED_2_EN_PIN , DIO_LOW );
 80007aa:	2200      	movs	r2, #0
 80007ac:	210a      	movs	r1, #10
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff fe26 	bl	8000400 <M_DIO_void_setPinVal>
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <H_SSD_voiddisplayNumber>:
void	H_SSD_voiddisplayNumber	(u8 number)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	0002      	movs	r2, r0
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	701a      	strb	r2, [r3, #0]
	u8  Local_u8Dig1 = 0, Local_u8Dig2 = 0;
 80007c8:	230b      	movs	r3, #11
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
 80007d0:	230a      	movs	r3, #10
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
	u32 Local_u32Counter = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
	if(number < 100)
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b63      	cmp	r3, #99	; 0x63
 80007e2:	d900      	bls.n	80007e6 <H_SSD_voiddisplayNumber+0x2a>
 80007e4:	e191      	b.n	8000b0a <H_SSD_voiddisplayNumber+0x34e>
	{
		Local_u8Dig1 = number % 10; // number = 23  -> 2.3   -> Local_u8Dig1 = 3
 80007e6:	230b      	movs	r3, #11
 80007e8:	18fc      	adds	r4, r7, r3
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	210a      	movs	r1, #10
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff fd0f 	bl	8000214 <__aeabi_uidivmod>
 80007f6:	000b      	movs	r3, r1
 80007f8:	7023      	strb	r3, [r4, #0]
		Local_u8Dig2 = number / 10;
 80007fa:	230a      	movs	r3, #10
 80007fc:	18fc      	adds	r4, r7, r3
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	210a      	movs	r1, #10
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff fc7f 	bl	8000108 <__udivsi3>
 800080a:	0003      	movs	r3, r0
 800080c:	7023      	strb	r3, [r4, #0]
		for(Local_u32Counter = 0 ; Local_u32Counter < SSD_DISPLAY_TIME ; Local_u32Counter++)
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	e176      	b.n	8000b02 <H_SSD_voiddisplayNumber+0x346>
		{
			/* Enable  SSD_1 , Disable SSD_2 */
//			M_DIO_void_setPinVal(SSD_LED_1_EN_PORT, SSD_LED_1_EN_PIN , DIO_HIGH);
//			M_DIO_void_setPinVal(SSD_LED_2_EN_PORT, SSD_LED_2_EN_PIN , DIO_LOW );
			/* Select number */
			switch(Local_u8Dig1)
 8000814:	230b      	movs	r3, #11
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b09      	cmp	r3, #9
 800081c:	d900      	bls.n	8000820 <H_SSD_voiddisplayNumber+0x64>
 800081e:	e16c      	b.n	8000afa <H_SSD_voiddisplayNumber+0x33e>
 8000820:	009a      	lsls	r2, r3, #2
 8000822:	4bbc      	ldr	r3, [pc, #752]	; (8000b14 <H_SSD_voiddisplayNumber+0x358>)
 8000824:	18d3      	adds	r3, r2, r3
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	469f      	mov	pc, r3
			{
			case 0:
				M_DIO_void_setPinVal(SSD_LED_A_PORT, SSD_LED_A_PIN , DIO_HIGH);
 800082a:	2201      	movs	r2, #1
 800082c:	2101      	movs	r1, #1
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff fde6 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_B_PORT, SSD_LED_B_PIN , DIO_HIGH);
 8000834:	2201      	movs	r2, #1
 8000836:	2102      	movs	r1, #2
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff fde1 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_C_PORT, SSD_LED_C_PIN , DIO_HIGH);
 800083e:	2201      	movs	r2, #1
 8000840:	2103      	movs	r1, #3
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff fddc 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_D_PORT, SSD_LED_D_PIN , DIO_HIGH);
 8000848:	2201      	movs	r2, #1
 800084a:	2104      	movs	r1, #4
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fdd7 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_E_PORT, SSD_LED_E_PIN , DIO_HIGH);
 8000852:	2201      	movs	r2, #1
 8000854:	2105      	movs	r1, #5
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fdd2 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_F_PORT, SSD_LED_F_PIN , DIO_HIGH);
 800085c:	2201      	movs	r2, #1
 800085e:	2106      	movs	r1, #6
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fdcd 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_G_PORT, SSD_LED_G_PIN , DIO_LOW );
 8000866:	2200      	movs	r2, #0
 8000868:	2107      	movs	r1, #7
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff fdc8 	bl	8000400 <M_DIO_void_setPinVal>
				break;
 8000870:	e144      	b.n	8000afc <H_SSD_voiddisplayNumber+0x340>
			case 1:
				M_DIO_void_setPinVal(SSD_LED_A_PORT, SSD_LED_A_PIN , DIO_LOW );
 8000872:	2200      	movs	r2, #0
 8000874:	2101      	movs	r1, #1
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fdc2 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_B_PORT, SSD_LED_B_PIN , DIO_HIGH);
 800087c:	2201      	movs	r2, #1
 800087e:	2102      	movs	r1, #2
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff fdbd 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_C_PORT, SSD_LED_C_PIN , DIO_HIGH);
 8000886:	2201      	movs	r2, #1
 8000888:	2103      	movs	r1, #3
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff fdb8 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_D_PORT, SSD_LED_D_PIN , DIO_LOW );
 8000890:	2200      	movs	r2, #0
 8000892:	2104      	movs	r1, #4
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff fdb3 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_E_PORT, SSD_LED_E_PIN , DIO_LOW );
 800089a:	2200      	movs	r2, #0
 800089c:	2105      	movs	r1, #5
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fdae 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_F_PORT, SSD_LED_F_PIN , DIO_LOW );
 80008a4:	2200      	movs	r2, #0
 80008a6:	2106      	movs	r1, #6
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fda9 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_G_PORT, SSD_LED_G_PIN , DIO_LOW );
 80008ae:	2200      	movs	r2, #0
 80008b0:	2107      	movs	r1, #7
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fda4 	bl	8000400 <M_DIO_void_setPinVal>
				break;
 80008b8:	e120      	b.n	8000afc <H_SSD_voiddisplayNumber+0x340>
			case 2:
				M_DIO_void_setPinVal(SSD_LED_A_PORT, SSD_LED_A_PIN , DIO_HIGH);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2101      	movs	r1, #1
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff fd9e 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_B_PORT, SSD_LED_B_PIN , DIO_HIGH);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2102      	movs	r1, #2
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff fd99 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_C_PORT, SSD_LED_C_PIN , DIO_LOW );
 80008ce:	2200      	movs	r2, #0
 80008d0:	2103      	movs	r1, #3
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff fd94 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_D_PORT, SSD_LED_D_PIN , DIO_HIGH);
 80008d8:	2201      	movs	r2, #1
 80008da:	2104      	movs	r1, #4
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff fd8f 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_E_PORT, SSD_LED_E_PIN , DIO_HIGH);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2105      	movs	r1, #5
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fd8a 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_F_PORT, SSD_LED_F_PIN , DIO_LOW );
 80008ec:	2200      	movs	r2, #0
 80008ee:	2106      	movs	r1, #6
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff fd85 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_G_PORT, SSD_LED_G_PIN , DIO_HIGH);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2107      	movs	r1, #7
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff fd80 	bl	8000400 <M_DIO_void_setPinVal>
				break;
 8000900:	e0fc      	b.n	8000afc <H_SSD_voiddisplayNumber+0x340>
			case 3:
				M_DIO_void_setPinVal(SSD_LED_A_PORT, SSD_LED_A_PIN , DIO_HIGH);
 8000902:	2201      	movs	r2, #1
 8000904:	2101      	movs	r1, #1
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff fd7a 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_B_PORT, SSD_LED_B_PIN , DIO_HIGH);
 800090c:	2201      	movs	r2, #1
 800090e:	2102      	movs	r1, #2
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fd75 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_C_PORT, SSD_LED_C_PIN , DIO_HIGH);
 8000916:	2201      	movs	r2, #1
 8000918:	2103      	movs	r1, #3
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fd70 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_D_PORT, SSD_LED_D_PIN , DIO_HIGH);
 8000920:	2201      	movs	r2, #1
 8000922:	2104      	movs	r1, #4
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fd6b 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_E_PORT, SSD_LED_E_PIN , DIO_LOW );
 800092a:	2200      	movs	r2, #0
 800092c:	2105      	movs	r1, #5
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff fd66 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_F_PORT, SSD_LED_F_PIN , DIO_LOW );
 8000934:	2200      	movs	r2, #0
 8000936:	2106      	movs	r1, #6
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff fd61 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_G_PORT, SSD_LED_G_PIN , DIO_HIGH);
 800093e:	2201      	movs	r2, #1
 8000940:	2107      	movs	r1, #7
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fd5c 	bl	8000400 <M_DIO_void_setPinVal>
				break;
 8000948:	e0d8      	b.n	8000afc <H_SSD_voiddisplayNumber+0x340>
			case 4:
				M_DIO_void_setPinVal(SSD_LED_A_PORT, SSD_LED_A_PIN , DIO_LOW );
 800094a:	2200      	movs	r2, #0
 800094c:	2101      	movs	r1, #1
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff fd56 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_B_PORT, SSD_LED_B_PIN , DIO_HIGH);
 8000954:	2201      	movs	r2, #1
 8000956:	2102      	movs	r1, #2
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fd51 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_C_PORT, SSD_LED_C_PIN , DIO_HIGH);
 800095e:	2201      	movs	r2, #1
 8000960:	2103      	movs	r1, #3
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fd4c 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_D_PORT, SSD_LED_D_PIN , DIO_LOW );
 8000968:	2200      	movs	r2, #0
 800096a:	2104      	movs	r1, #4
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff fd47 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_E_PORT, SSD_LED_E_PIN , DIO_LOW );
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff fd42 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_F_PORT, SSD_LED_F_PIN , DIO_HIGH);
 800097c:	2201      	movs	r2, #1
 800097e:	2106      	movs	r1, #6
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff fd3d 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_G_PORT, SSD_LED_G_PIN , DIO_HIGH);
 8000986:	2201      	movs	r2, #1
 8000988:	2107      	movs	r1, #7
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fd38 	bl	8000400 <M_DIO_void_setPinVal>
				break;
 8000990:	e0b4      	b.n	8000afc <H_SSD_voiddisplayNumber+0x340>
			case 5:
				M_DIO_void_setPinVal(SSD_LED_A_PORT, SSD_LED_A_PIN , DIO_HIGH);
 8000992:	2201      	movs	r2, #1
 8000994:	2101      	movs	r1, #1
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fd32 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_B_PORT, SSD_LED_B_PIN , DIO_LOW );
 800099c:	2200      	movs	r2, #0
 800099e:	2102      	movs	r1, #2
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff fd2d 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_C_PORT, SSD_LED_C_PIN , DIO_HIGH);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2103      	movs	r1, #3
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fd28 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_D_PORT, SSD_LED_D_PIN , DIO_HIGH);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2104      	movs	r1, #4
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fd23 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_E_PORT, SSD_LED_E_PIN , DIO_LOW );
 80009ba:	2200      	movs	r2, #0
 80009bc:	2105      	movs	r1, #5
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff fd1e 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_F_PORT, SSD_LED_F_PIN , DIO_HIGH);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2106      	movs	r1, #6
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff fd19 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_G_PORT, SSD_LED_G_PIN , DIO_HIGH);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2107      	movs	r1, #7
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fd14 	bl	8000400 <M_DIO_void_setPinVal>
				break;
 80009d8:	e090      	b.n	8000afc <H_SSD_voiddisplayNumber+0x340>
			case 6:
				M_DIO_void_setPinVal(SSD_LED_A_PORT, SSD_LED_A_PIN , DIO_HIGH);
 80009da:	2201      	movs	r2, #1
 80009dc:	2101      	movs	r1, #1
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff fd0e 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_B_PORT, SSD_LED_B_PIN , DIO_LOW );
 80009e4:	2200      	movs	r2, #0
 80009e6:	2102      	movs	r1, #2
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fd09 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_C_PORT, SSD_LED_C_PIN , DIO_HIGH);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2103      	movs	r1, #3
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff fd04 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_D_PORT, SSD_LED_D_PIN , DIO_HIGH);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2104      	movs	r1, #4
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fcff 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_E_PORT, SSD_LED_E_PIN , DIO_HIGH);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2105      	movs	r1, #5
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff fcfa 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_F_PORT, SSD_LED_F_PIN , DIO_HIGH);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2106      	movs	r1, #6
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fcf5 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_G_PORT, SSD_LED_G_PIN , DIO_HIGH);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2107      	movs	r1, #7
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fcf0 	bl	8000400 <M_DIO_void_setPinVal>
				break;
 8000a20:	e06c      	b.n	8000afc <H_SSD_voiddisplayNumber+0x340>
			case 7:
				M_DIO_void_setPinVal(SSD_LED_A_PORT, SSD_LED_A_PIN , DIO_HIGH);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2101      	movs	r1, #1
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff fcea 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_B_PORT, SSD_LED_B_PIN , DIO_HIGH);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2102      	movs	r1, #2
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fce5 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_C_PORT, SSD_LED_C_PIN , DIO_HIGH);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2103      	movs	r1, #3
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff fce0 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_D_PORT, SSD_LED_D_PIN , DIO_LOW );
 8000a40:	2200      	movs	r2, #0
 8000a42:	2104      	movs	r1, #4
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fcdb 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_E_PORT, SSD_LED_E_PIN , DIO_LOW );
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2105      	movs	r1, #5
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff fcd6 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_F_PORT, SSD_LED_F_PIN , DIO_LOW );
 8000a54:	2200      	movs	r2, #0
 8000a56:	2106      	movs	r1, #6
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fcd1 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_G_PORT, SSD_LED_G_PIN , DIO_LOW );
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2107      	movs	r1, #7
 8000a62:	2000      	movs	r0, #0
 8000a64:	f7ff fccc 	bl	8000400 <M_DIO_void_setPinVal>
				break;
 8000a68:	e048      	b.n	8000afc <H_SSD_voiddisplayNumber+0x340>
			case 8:
				M_DIO_void_setPinVal(SSD_LED_A_PORT, SSD_LED_A_PIN , DIO_HIGH);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fcc6 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_B_PORT, SSD_LED_B_PIN , DIO_HIGH);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2102      	movs	r1, #2
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fcc1 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_C_PORT, SSD_LED_C_PIN , DIO_HIGH);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2103      	movs	r1, #3
 8000a82:	2000      	movs	r0, #0
 8000a84:	f7ff fcbc 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_D_PORT, SSD_LED_D_PIN , DIO_HIGH);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff fcb7 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_E_PORT, SSD_LED_E_PIN , DIO_HIGH);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2105      	movs	r1, #5
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff fcb2 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_F_PORT, SSD_LED_F_PIN , DIO_HIGH);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2106      	movs	r1, #6
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff fcad 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_G_PORT, SSD_LED_G_PIN , DIO_HIGH);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2107      	movs	r1, #7
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fca8 	bl	8000400 <M_DIO_void_setPinVal>
				break;
 8000ab0:	e024      	b.n	8000afc <H_SSD_voiddisplayNumber+0x340>
			case 9:
				M_DIO_void_setPinVal(SSD_LED_A_PORT, SSD_LED_A_PIN , DIO_HIGH);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fca2 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_B_PORT, SSD_LED_B_PIN , DIO_HIGH);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2102      	movs	r1, #2
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff fc9d 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_C_PORT, SSD_LED_C_PIN , DIO_HIGH);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2103      	movs	r1, #3
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff fc98 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_D_PORT, SSD_LED_D_PIN , DIO_HIGH);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff fc93 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_E_PORT, SSD_LED_E_PIN , DIO_LOW );
 8000ada:	2200      	movs	r2, #0
 8000adc:	2105      	movs	r1, #5
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff fc8e 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_F_PORT, SSD_LED_F_PIN , DIO_HIGH);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2106      	movs	r1, #6
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff fc89 	bl	8000400 <M_DIO_void_setPinVal>
				M_DIO_void_setPinVal(SSD_LED_G_PORT, SSD_LED_G_PIN , DIO_HIGH);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2107      	movs	r1, #7
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff fc84 	bl	8000400 <M_DIO_void_setPinVal>
				break;
 8000af8:	e000      	b.n	8000afc <H_SSD_voiddisplayNumber+0x340>
			default : /* do nothing */ break;
 8000afa:	46c0      	nop			; (mov r8, r8)
		for(Local_u32Counter = 0 ; Local_u32Counter < SSD_DISPLAY_TIME ; Local_u32Counter++)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3301      	adds	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2b31      	cmp	r3, #49	; 0x31
 8000b06:	d800      	bhi.n	8000b0a <H_SSD_voiddisplayNumber+0x34e>
 8000b08:	e684      	b.n	8000814 <H_SSD_voiddisplayNumber+0x58>
	}
	else
	{
		/* do nothing */
	}
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b005      	add	sp, #20
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	08000c44 	.word	0x08000c44

08000b18 <main>:
#include	"RCC_interface.h"
#include	"DIO_interface.h"


void main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	/*****************  Initialization Part  ****************/

	u8 Local_u8Value = DIO_HIGH;
 8000b1e:	1dbb      	adds	r3, r7, #6
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	u8 Local_u8Num = 0;
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
	PB_t PB1 = {1,PORTA, PIN0, ACTIVE_LOW , NOT_PRESSED_AL};
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <main+0x6c>)
 8000b2e:	6811      	ldr	r1, [r2, #0]
 8000b30:	6019      	str	r1, [r3, #0]
 8000b32:	7912      	ldrb	r2, [r2, #4]
 8000b34:	711a      	strb	r2, [r3, #4]

	// System Clk init
	MRCC_voidSysClkInit();
 8000b36:	f7ff fd9f 	bl	8000678 <MRCC_voidSysClkInit>

	// Enable Per Clk "RCC" DIO_A
	MRCC_voidEnablePerClk(RCC_APB2,DIO_A);
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	f7ff fdb7 	bl	80006b0 <MRCC_voidEnablePerClk>

	// Init PB
	H_PB_voidinit(& PB1);
 8000b42:	003b      	movs	r3, r7
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff fd49 	bl	80005dc <H_PB_voidinit>

	// Init SSD
	H_SSD_voidinit();
 8000b4a:	f7ff fdf5 	bl	8000738 <H_SSD_voidinit>


	while(1)
	{
		H_PB_voidread_1	(& PB1, &Local_u8Value);
 8000b4e:	1dba      	adds	r2, r7, #6
 8000b50:	003b      	movs	r3, r7
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff fd56 	bl	8000606 <H_PB_voidread_1>
		if(Local_u8Value == PRESSED_AL)
 8000b5a:	1dbb      	adds	r3, r7, #6
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1f5      	bne.n	8000b4e <main+0x36>
		{
			if(Local_u8Num < 9)
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	d808      	bhi.n	8000b7c <main+0x64>
			{
				H_SSD_voiddisplayNumber(Local_u8Num++);
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	1dfa      	adds	r2, r7, #7
 8000b70:	1c59      	adds	r1, r3, #1
 8000b72:	7011      	strb	r1, [r2, #0]
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff fe21 	bl	80007bc <H_SSD_voiddisplayNumber>
 8000b7a:	e7e8      	b.n	8000b4e <main+0x36>
			}
			else
			{
				Local_u8Num = 0;
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
		H_PB_voidread_1	(& PB1, &Local_u8Value);
 8000b82:	e7e4      	b.n	8000b4e <main+0x36>
 8000b84:	08000c3c 	.word	0x08000c3c

08000b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b8c:	e000      	b.n	8000b90 <Reset_Handler+0x8>
 8000b8e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bb6:	f000 f811 	bl	8000bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff ffad 	bl	8000b18 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000bcc:	08000c74 	.word	0x08000c74
  ldr r2, =_sbss
 8000bd0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000bd4:	2000001c 	.word	0x2000001c

08000bd8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <__libc_init_array>:
 8000bdc:	b570      	push	{r4, r5, r6, lr}
 8000bde:	2600      	movs	r6, #0
 8000be0:	4d0c      	ldr	r5, [pc, #48]	; (8000c14 <__libc_init_array+0x38>)
 8000be2:	4c0d      	ldr	r4, [pc, #52]	; (8000c18 <__libc_init_array+0x3c>)
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	10a4      	asrs	r4, r4, #2
 8000be8:	42a6      	cmp	r6, r4
 8000bea:	d109      	bne.n	8000c00 <__libc_init_array+0x24>
 8000bec:	2600      	movs	r6, #0
 8000bee:	f000 f819 	bl	8000c24 <_init>
 8000bf2:	4d0a      	ldr	r5, [pc, #40]	; (8000c1c <__libc_init_array+0x40>)
 8000bf4:	4c0a      	ldr	r4, [pc, #40]	; (8000c20 <__libc_init_array+0x44>)
 8000bf6:	1b64      	subs	r4, r4, r5
 8000bf8:	10a4      	asrs	r4, r4, #2
 8000bfa:	42a6      	cmp	r6, r4
 8000bfc:	d105      	bne.n	8000c0a <__libc_init_array+0x2e>
 8000bfe:	bd70      	pop	{r4, r5, r6, pc}
 8000c00:	00b3      	lsls	r3, r6, #2
 8000c02:	58eb      	ldr	r3, [r5, r3]
 8000c04:	4798      	blx	r3
 8000c06:	3601      	adds	r6, #1
 8000c08:	e7ee      	b.n	8000be8 <__libc_init_array+0xc>
 8000c0a:	00b3      	lsls	r3, r6, #2
 8000c0c:	58eb      	ldr	r3, [r5, r3]
 8000c0e:	4798      	blx	r3
 8000c10:	3601      	adds	r6, #1
 8000c12:	e7f2      	b.n	8000bfa <__libc_init_array+0x1e>
 8000c14:	08000c6c 	.word	0x08000c6c
 8000c18:	08000c6c 	.word	0x08000c6c
 8000c1c:	08000c6c 	.word	0x08000c6c
 8000c20:	08000c70 	.word	0x08000c70

08000c24 <_init>:
 8000c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c2a:	bc08      	pop	{r3}
 8000c2c:	469e      	mov	lr, r3
 8000c2e:	4770      	bx	lr

08000c30 <_fini>:
 8000c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c36:	bc08      	pop	{r3}
 8000c38:	469e      	mov	lr, r3
 8000c3a:	4770      	bx	lr
