
RCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002ec  080002f4  000102f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002ec  080002ec  000102f4  2**0
                  CONTENTS
  4 .ARM          00000000  080002ec  080002ec  000102f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002ec  080002f4  000102f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002ec  080002ec  000102ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002f0  080002f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002f4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001bf  00000000  00000000  0001031c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000106  00000000  00000000  000104db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000080  00000000  00000000  000105e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000058  00000000  00000000  00010668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000100  00000000  00000000  000106c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000020e  00000000  00000000  000107c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003029  00000000  00000000  000109ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000139f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e4  00000000  00000000  00013a74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002d4 	.word	0x080002d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080002d4 	.word	0x080002d4

08000108 <Delay>:
#include	"RCC_interface.h"
#define		GPIOC_CRH		*((u32 *)(0x40011000 + 0x04)) //DDR
#define		GPIOC_ODR		*((u32 *)(0x40011000 + 0x0C))	//PORT

void	Delay(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
for(u32 i = 0; i < 500000 ; i++)
 800010e:	2300      	movs	r3, #0
 8000110:	607b      	str	r3, [r7, #4]
 8000112:	e003      	b.n	800011c <Delay+0x14>
	{
		asm("NOP");
 8000114:	46c0      	nop			; (mov r8, r8)
for(u32 i = 0; i < 500000 ; i++)
 8000116:	687b      	ldr	r3, [r7, #4]
 8000118:	3301      	adds	r3, #1
 800011a:	607b      	str	r3, [r7, #4]
 800011c:	687b      	ldr	r3, [r7, #4]
 800011e:	4a03      	ldr	r2, [pc, #12]	; (800012c <Delay+0x24>)
 8000120:	4293      	cmp	r3, r2
 8000122:	d9f7      	bls.n	8000114 <Delay+0xc>
	}
}
 8000124:	46c0      	nop			; (mov r8, r8)
 8000126:	46bd      	mov	sp, r7
 8000128:	b002      	add	sp, #8
 800012a:	bd80      	pop	{r7, pc}
 800012c:	0007a11f 	.word	0x0007a11f

08000130 <main>:


int	main(void)
{
 8000130:	b580      	push	{r7, lr}
 8000132:	af00      	add	r7, sp, #0
	/*	Initialization Part		*/

	/*	System Clk init			*/
	MRCC_voidSysClkInit();
 8000134:	f000 f820 	bl	8000178 <MRCC_voidSysClkInit>

	/*	Toggle Led C13	GPIOC	*/
	/*	1- Enable Per Clk "RCC" */
	MRCC_voidEnablePerClk(RCC_APB2,4);
 8000138:	2104      	movs	r1, #4
 800013a:	2002      	movs	r0, #2
 800013c:	f000 f838 	bl	80001b0 <MRCC_voidEnablePerClk>

	/*	Direction for C13 is output */
	GPIOC_CRH = 0x00300000;
 8000140:	4b0a      	ldr	r3, [pc, #40]	; (800016c <main+0x3c>)
 8000142:	22c0      	movs	r2, #192	; 0xc0
 8000144:	0392      	lsls	r2, r2, #14
 8000146:	601a      	str	r2, [r3, #0]
	while(1)
	{
		/*	Toggle led */
		SET_BIT(GPIOC_ODR,13);
 8000148:	4b09      	ldr	r3, [pc, #36]	; (8000170 <main+0x40>)
 800014a:	681a      	ldr	r2, [r3, #0]
 800014c:	4b08      	ldr	r3, [pc, #32]	; (8000170 <main+0x40>)
 800014e:	2180      	movs	r1, #128	; 0x80
 8000150:	0189      	lsls	r1, r1, #6
 8000152:	430a      	orrs	r2, r1
 8000154:	601a      	str	r2, [r3, #0]
	Delay();
 8000156:	f7ff ffd7 	bl	8000108 <Delay>
	CLR_BIT(GPIOC_ODR,13);
 800015a:	4b05      	ldr	r3, [pc, #20]	; (8000170 <main+0x40>)
 800015c:	681a      	ldr	r2, [r3, #0]
 800015e:	4b04      	ldr	r3, [pc, #16]	; (8000170 <main+0x40>)
 8000160:	4904      	ldr	r1, [pc, #16]	; (8000174 <main+0x44>)
 8000162:	400a      	ands	r2, r1
 8000164:	601a      	str	r2, [r3, #0]
	Delay();
 8000166:	f7ff ffcf 	bl	8000108 <Delay>
		SET_BIT(GPIOC_ODR,13);
 800016a:	e7ed      	b.n	8000148 <main+0x18>
 800016c:	40011004 	.word	0x40011004
 8000170:	4001100c 	.word	0x4001100c
 8000174:	ffffdfff 	.word	0xffffdfff

08000178 <MRCC_voidSysClkInit>:
#include	"RCC_config.h"



void	MRCC_voidSysClkInit(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	#if			SYSTEM_CLK	==	RCC_HSI
				SET_BIT(RCC_CR,0);
 800017c:	4b0a      	ldr	r3, [pc, #40]	; (80001a8 <MRCC_voidSysClkInit+0x30>)
 800017e:	681a      	ldr	r2, [r3, #0]
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <MRCC_voidSysClkInit+0x30>)
 8000182:	2101      	movs	r1, #1
 8000184:	430a      	orrs	r2, r1
 8000186:	601a      	str	r2, [r3, #0]
				CLR_BIT(RCC_CFGR,0);
 8000188:	4b08      	ldr	r3, [pc, #32]	; (80001ac <MRCC_voidSysClkInit+0x34>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <MRCC_voidSysClkInit+0x34>)
 800018e:	2101      	movs	r1, #1
 8000190:	438a      	bics	r2, r1
 8000192:	601a      	str	r2, [r3, #0]
				CLR_BIT(RCC_CFGR,1);
 8000194:	4b05      	ldr	r3, [pc, #20]	; (80001ac <MRCC_voidSysClkInit+0x34>)
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <MRCC_voidSysClkInit+0x34>)
 800019a:	2102      	movs	r1, #2
 800019c:	438a      	bics	r2, r1
 800019e:	601a      	str	r2, [r3, #0]
				CLR_BIT(RCC_CFGR,0);
				SET_BIT(RCC_CFGR,1);
	#else
		#error	"Wrong choice of RCC clock type"
	#endif
}
 80001a0:	46c0      	nop			; (mov r8, r8)
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	46c0      	nop			; (mov r8, r8)
 80001a8:	40021000 	.word	0x40021000
 80001ac:	40021004 	.word	0x40021004

080001b0 <MRCC_voidEnablePerClk>:
void	MRCC_voidEnablePerClk(u8 PerBus,u8 PerNum)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	0002      	movs	r2, r0
 80001b8:	1dfb      	adds	r3, r7, #7
 80001ba:	701a      	strb	r2, [r3, #0]
 80001bc:	1dbb      	adds	r3, r7, #6
 80001be:	1c0a      	adds	r2, r1, #0
 80001c0:	701a      	strb	r2, [r3, #0]
	/*	Range Check						*/
	if(PerNum<32)
 80001c2:	1dbb      	adds	r3, r7, #6
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	2b1f      	cmp	r3, #31
 80001c8:	d82c      	bhi.n	8000224 <MRCC_voidEnablePerClk+0x74>
	{
		switch(PerBus)
 80001ca:	1dfb      	adds	r3, r7, #7
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d010      	beq.n	80001f4 <MRCC_voidEnablePerClk+0x44>
 80001d2:	2b02      	cmp	r3, #2
 80001d4:	d01a      	beq.n	800020c <MRCC_voidEnablePerClk+0x5c>
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d000      	beq.n	80001dc <MRCC_voidEnablePerClk+0x2c>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
		}
	}
	else
	{/*		Report Error 			*/}	
}
 80001da:	e023      	b.n	8000224 <MRCC_voidEnablePerClk+0x74>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR ,PerNum);	break;
 80001dc:	4b13      	ldr	r3, [pc, #76]	; (800022c <MRCC_voidEnablePerClk+0x7c>)
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	1dbb      	adds	r3, r7, #6
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	2101      	movs	r1, #1
 80001e6:	4099      	lsls	r1, r3
 80001e8:	000b      	movs	r3, r1
 80001ea:	0019      	movs	r1, r3
 80001ec:	4b0f      	ldr	r3, [pc, #60]	; (800022c <MRCC_voidEnablePerClk+0x7c>)
 80001ee:	430a      	orrs	r2, r1
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	e017      	b.n	8000224 <MRCC_voidEnablePerClk+0x74>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerNum);	break;
 80001f4:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <MRCC_voidEnablePerClk+0x80>)
 80001f6:	681a      	ldr	r2, [r3, #0]
 80001f8:	1dbb      	adds	r3, r7, #6
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	2101      	movs	r1, #1
 80001fe:	4099      	lsls	r1, r3
 8000200:	000b      	movs	r3, r1
 8000202:	0019      	movs	r1, r3
 8000204:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <MRCC_voidEnablePerClk+0x80>)
 8000206:	430a      	orrs	r2, r1
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	e00b      	b.n	8000224 <MRCC_voidEnablePerClk+0x74>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
 800020c:	4b09      	ldr	r3, [pc, #36]	; (8000234 <MRCC_voidEnablePerClk+0x84>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	1dbb      	adds	r3, r7, #6
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2101      	movs	r1, #1
 8000216:	4099      	lsls	r1, r3
 8000218:	000b      	movs	r3, r1
 800021a:	0019      	movs	r1, r3
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <MRCC_voidEnablePerClk+0x84>)
 800021e:	430a      	orrs	r2, r1
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	46c0      	nop			; (mov r8, r8)
}
 8000224:	46c0      	nop			; (mov r8, r8)
 8000226:	46bd      	mov	sp, r7
 8000228:	b002      	add	sp, #8
 800022a:	bd80      	pop	{r7, pc}
 800022c:	40021014 	.word	0x40021014
 8000230:	4002101c 	.word	0x4002101c
 8000234:	40021018 	.word	0x40021018

08000238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800023c:	e000      	b.n	8000240 <Reset_Handler+0x8>
 800023e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000240:	480c      	ldr	r0, [pc, #48]	; (8000274 <LoopForever+0x6>)
  ldr r1, =_edata
 8000242:	490d      	ldr	r1, [pc, #52]	; (8000278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000244:	4a0d      	ldr	r2, [pc, #52]	; (800027c <LoopForever+0xe>)
  movs r3, #0
 8000246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000248:	e002      	b.n	8000250 <LoopCopyDataInit>

0800024a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800024c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024e:	3304      	adds	r3, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000254:	d3f9      	bcc.n	800024a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000258:	4c0a      	ldr	r4, [pc, #40]	; (8000284 <LoopForever+0x16>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800025c:	e001      	b.n	8000262 <LoopFillZerobss>

0800025e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000260:	3204      	adds	r2, #4

08000262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000264:	d3fb      	bcc.n	800025e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000266:	f000 f811 	bl	800028c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026a:	f7ff ff61 	bl	8000130 <main>

0800026e <LoopForever>:

LoopForever:
    b LoopForever
 800026e:	e7fe      	b.n	800026e <LoopForever>
  ldr   r0, =_estack
 8000270:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000278:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800027c:	080002f4 	.word	0x080002f4
  ldr r2, =_sbss
 8000280:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000284:	2000001c 	.word	0x2000001c

08000288 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC_IRQHandler>
	...

0800028c <__libc_init_array>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	2600      	movs	r6, #0
 8000290:	4d0c      	ldr	r5, [pc, #48]	; (80002c4 <__libc_init_array+0x38>)
 8000292:	4c0d      	ldr	r4, [pc, #52]	; (80002c8 <__libc_init_array+0x3c>)
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	10a4      	asrs	r4, r4, #2
 8000298:	42a6      	cmp	r6, r4
 800029a:	d109      	bne.n	80002b0 <__libc_init_array+0x24>
 800029c:	2600      	movs	r6, #0
 800029e:	f000 f819 	bl	80002d4 <_init>
 80002a2:	4d0a      	ldr	r5, [pc, #40]	; (80002cc <__libc_init_array+0x40>)
 80002a4:	4c0a      	ldr	r4, [pc, #40]	; (80002d0 <__libc_init_array+0x44>)
 80002a6:	1b64      	subs	r4, r4, r5
 80002a8:	10a4      	asrs	r4, r4, #2
 80002aa:	42a6      	cmp	r6, r4
 80002ac:	d105      	bne.n	80002ba <__libc_init_array+0x2e>
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	00b3      	lsls	r3, r6, #2
 80002b2:	58eb      	ldr	r3, [r5, r3]
 80002b4:	4798      	blx	r3
 80002b6:	3601      	adds	r6, #1
 80002b8:	e7ee      	b.n	8000298 <__libc_init_array+0xc>
 80002ba:	00b3      	lsls	r3, r6, #2
 80002bc:	58eb      	ldr	r3, [r5, r3]
 80002be:	4798      	blx	r3
 80002c0:	3601      	adds	r6, #1
 80002c2:	e7f2      	b.n	80002aa <__libc_init_array+0x1e>
 80002c4:	080002ec 	.word	0x080002ec
 80002c8:	080002ec 	.word	0x080002ec
 80002cc:	080002ec 	.word	0x080002ec
 80002d0:	080002f0 	.word	0x080002f0

080002d4 <_init>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr

080002e0 <_fini>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr
