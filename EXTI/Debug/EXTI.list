
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000748  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000808  08000810  00010810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000808  08000808  00010810  2**0
                  CONTENTS
  4 .ARM          00000000  08000808  08000808  00010810  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000808  08000810  00010810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000808  08000808  00010808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800080c  0800080c  0001080c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000810  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000810  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010810  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006c5  00000000  00000000  00010838  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000037a  00000000  00000000  00010efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000168  00000000  00000000  00011278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000110  00000000  00000000  000113e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000ebb  00000000  00000000  000114f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000005c2  00000000  00000000  000123ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003b82  00000000  00000000  0001296d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000164ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000380  00000000  00000000  0001656c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080007f0 	.word	0x080007f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080007f0 	.word	0x080007f0

08000108 <M_GPIO_void_SetPinDir>:

#include "DIO_priv.h"
#include "DIO_int.h"

void M_GPIO_void_SetPinDir(u8 PortID , u8 PinID , u8 Dir)
{
 8000108:	b590      	push	{r4, r7, lr}
 800010a:	b083      	sub	sp, #12
 800010c:	af00      	add	r7, sp, #0
 800010e:	0004      	movs	r4, r0
 8000110:	0008      	movs	r0, r1
 8000112:	0011      	movs	r1, r2
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	1c22      	adds	r2, r4, #0
 8000118:	701a      	strb	r2, [r3, #0]
 800011a:	1dbb      	adds	r3, r7, #6
 800011c:	1c02      	adds	r2, r0, #0
 800011e:	701a      	strb	r2, [r3, #0]
 8000120:	1d7b      	adds	r3, r7, #5
 8000122:	1c0a      	adds	r2, r1, #0
 8000124:	701a      	strb	r2, [r3, #0]
	//Range Check
if(PortID < 3 && PinID < 16 && Dir < 16)
 8000126:	1dfb      	adds	r3, r7, #7
 8000128:	781b      	ldrb	r3, [r3, #0]
 800012a:	2b02      	cmp	r3, #2
 800012c:	d900      	bls.n	8000130 <M_GPIO_void_SetPinDir+0x28>
 800012e:	e0cb      	b.n	80002c8 <M_GPIO_void_SetPinDir+0x1c0>
 8000130:	1dbb      	adds	r3, r7, #6
 8000132:	781b      	ldrb	r3, [r3, #0]
 8000134:	2b0f      	cmp	r3, #15
 8000136:	d900      	bls.n	800013a <M_GPIO_void_SetPinDir+0x32>
 8000138:	e0c6      	b.n	80002c8 <M_GPIO_void_SetPinDir+0x1c0>
 800013a:	1d7b      	adds	r3, r7, #5
 800013c:	781b      	ldrb	r3, [r3, #0]
 800013e:	2b0f      	cmp	r3, #15
 8000140:	d900      	bls.n	8000144 <M_GPIO_void_SetPinDir+0x3c>
 8000142:	e0c1      	b.n	80002c8 <M_GPIO_void_SetPinDir+0x1c0>
{
	if(PinID < 8) /*PIN0 : PIN7 --> CRL*/
 8000144:	1dbb      	adds	r3, r7, #6
 8000146:	781b      	ldrb	r3, [r3, #0]
 8000148:	2b07      	cmp	r3, #7
 800014a:	d85a      	bhi.n	8000202 <M_GPIO_void_SetPinDir+0xfa>
	{
		switch(PortID)
 800014c:	1dfb      	adds	r3, r7, #7
 800014e:	781b      	ldrb	r3, [r3, #0]
 8000150:	2b01      	cmp	r3, #1
 8000152:	d01f      	beq.n	8000194 <M_GPIO_void_SetPinDir+0x8c>
 8000154:	2b02      	cmp	r3, #2
 8000156:	d038      	beq.n	80001ca <M_GPIO_void_SetPinDir+0xc2>
 8000158:	2b00      	cmp	r3, #0
 800015a:	d000      	beq.n	800015e <M_GPIO_void_SetPinDir+0x56>
			GPIOC_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
			break;
		}
	}
	}
}
 800015c:	e0b4      	b.n	80002c8 <M_GPIO_void_SetPinDir+0x1c0>
			GPIOA_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 800015e:	4b5c      	ldr	r3, [pc, #368]	; (80002d0 <M_GPIO_void_SetPinDir+0x1c8>)
 8000160:	681a      	ldr	r2, [r3, #0]
 8000162:	1dbb      	adds	r3, r7, #6
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	009b      	lsls	r3, r3, #2
 8000168:	210f      	movs	r1, #15
 800016a:	4099      	lsls	r1, r3
 800016c:	000b      	movs	r3, r1
 800016e:	43db      	mvns	r3, r3
 8000170:	0019      	movs	r1, r3
 8000172:	4b57      	ldr	r3, [pc, #348]	; (80002d0 <M_GPIO_void_SetPinDir+0x1c8>)
 8000174:	400a      	ands	r2, r1
 8000176:	601a      	str	r2, [r3, #0]
			GPIOA_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 8000178:	4b55      	ldr	r3, [pc, #340]	; (80002d0 <M_GPIO_void_SetPinDir+0x1c8>)
 800017a:	681a      	ldr	r2, [r3, #0]
 800017c:	1d7b      	adds	r3, r7, #5
 800017e:	7819      	ldrb	r1, [r3, #0]
 8000180:	1dbb      	adds	r3, r7, #6
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	009b      	lsls	r3, r3, #2
 8000186:	4099      	lsls	r1, r3
 8000188:	000b      	movs	r3, r1
 800018a:	0019      	movs	r1, r3
 800018c:	4b50      	ldr	r3, [pc, #320]	; (80002d0 <M_GPIO_void_SetPinDir+0x1c8>)
 800018e:	430a      	orrs	r2, r1
 8000190:	601a      	str	r2, [r3, #0]
			break;
 8000192:	e099      	b.n	80002c8 <M_GPIO_void_SetPinDir+0x1c0>
			GPIOB_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000194:	4b4f      	ldr	r3, [pc, #316]	; (80002d4 <M_GPIO_void_SetPinDir+0x1cc>)
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	1dbb      	adds	r3, r7, #6
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	210f      	movs	r1, #15
 80001a0:	4099      	lsls	r1, r3
 80001a2:	000b      	movs	r3, r1
 80001a4:	43db      	mvns	r3, r3
 80001a6:	0019      	movs	r1, r3
 80001a8:	4b4a      	ldr	r3, [pc, #296]	; (80002d4 <M_GPIO_void_SetPinDir+0x1cc>)
 80001aa:	400a      	ands	r2, r1
 80001ac:	601a      	str	r2, [r3, #0]
			GPIOB_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80001ae:	4b49      	ldr	r3, [pc, #292]	; (80002d4 <M_GPIO_void_SetPinDir+0x1cc>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	1d7b      	adds	r3, r7, #5
 80001b4:	7819      	ldrb	r1, [r3, #0]
 80001b6:	1dbb      	adds	r3, r7, #6
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	4099      	lsls	r1, r3
 80001be:	000b      	movs	r3, r1
 80001c0:	0019      	movs	r1, r3
 80001c2:	4b44      	ldr	r3, [pc, #272]	; (80002d4 <M_GPIO_void_SetPinDir+0x1cc>)
 80001c4:	430a      	orrs	r2, r1
 80001c6:	601a      	str	r2, [r3, #0]
			break;
 80001c8:	e07e      	b.n	80002c8 <M_GPIO_void_SetPinDir+0x1c0>
			GPIOC_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80001ca:	4b43      	ldr	r3, [pc, #268]	; (80002d8 <M_GPIO_void_SetPinDir+0x1d0>)
 80001cc:	681a      	ldr	r2, [r3, #0]
 80001ce:	1dbb      	adds	r3, r7, #6
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	009b      	lsls	r3, r3, #2
 80001d4:	210f      	movs	r1, #15
 80001d6:	4099      	lsls	r1, r3
 80001d8:	000b      	movs	r3, r1
 80001da:	43db      	mvns	r3, r3
 80001dc:	0019      	movs	r1, r3
 80001de:	4b3e      	ldr	r3, [pc, #248]	; (80002d8 <M_GPIO_void_SetPinDir+0x1d0>)
 80001e0:	400a      	ands	r2, r1
 80001e2:	601a      	str	r2, [r3, #0]
			GPIOC_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80001e4:	4b3c      	ldr	r3, [pc, #240]	; (80002d8 <M_GPIO_void_SetPinDir+0x1d0>)
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	1d7b      	adds	r3, r7, #5
 80001ea:	7819      	ldrb	r1, [r3, #0]
 80001ec:	1dbb      	adds	r3, r7, #6
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	009b      	lsls	r3, r3, #2
 80001f2:	4099      	lsls	r1, r3
 80001f4:	000b      	movs	r3, r1
 80001f6:	0019      	movs	r1, r3
 80001f8:	4b37      	ldr	r3, [pc, #220]	; (80002d8 <M_GPIO_void_SetPinDir+0x1d0>)
 80001fa:	430a      	orrs	r2, r1
 80001fc:	601a      	str	r2, [r3, #0]
			break;
 80001fe:	46c0      	nop			; (mov r8, r8)
 8000200:	e062      	b.n	80002c8 <M_GPIO_void_SetPinDir+0x1c0>
	else if(PinID < 16) /*PIN0 : PIN7 --> CRL*/
 8000202:	1dbb      	adds	r3, r7, #6
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b0f      	cmp	r3, #15
 8000208:	d85e      	bhi.n	80002c8 <M_GPIO_void_SetPinDir+0x1c0>
		PinID -=8;
 800020a:	1dbb      	adds	r3, r7, #6
 800020c:	1dba      	adds	r2, r7, #6
 800020e:	7812      	ldrb	r2, [r2, #0]
 8000210:	3a08      	subs	r2, #8
 8000212:	701a      	strb	r2, [r3, #0]
		switch(PortID)
 8000214:	1dfb      	adds	r3, r7, #7
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b01      	cmp	r3, #1
 800021a:	d01f      	beq.n	800025c <M_GPIO_void_SetPinDir+0x154>
 800021c:	2b02      	cmp	r3, #2
 800021e:	d038      	beq.n	8000292 <M_GPIO_void_SetPinDir+0x18a>
 8000220:	2b00      	cmp	r3, #0
 8000222:	d000      	beq.n	8000226 <M_GPIO_void_SetPinDir+0x11e>
}
 8000224:	e050      	b.n	80002c8 <M_GPIO_void_SetPinDir+0x1c0>
			GPIOA_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000226:	4b2d      	ldr	r3, [pc, #180]	; (80002dc <M_GPIO_void_SetPinDir+0x1d4>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	1dbb      	adds	r3, r7, #6
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	210f      	movs	r1, #15
 8000232:	4099      	lsls	r1, r3
 8000234:	000b      	movs	r3, r1
 8000236:	43db      	mvns	r3, r3
 8000238:	0019      	movs	r1, r3
 800023a:	4b28      	ldr	r3, [pc, #160]	; (80002dc <M_GPIO_void_SetPinDir+0x1d4>)
 800023c:	400a      	ands	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
			GPIOA_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 8000240:	4b26      	ldr	r3, [pc, #152]	; (80002dc <M_GPIO_void_SetPinDir+0x1d4>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	1d7b      	adds	r3, r7, #5
 8000246:	7819      	ldrb	r1, [r3, #0]
 8000248:	1dbb      	adds	r3, r7, #6
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	4099      	lsls	r1, r3
 8000250:	000b      	movs	r3, r1
 8000252:	0019      	movs	r1, r3
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <M_GPIO_void_SetPinDir+0x1d4>)
 8000256:	430a      	orrs	r2, r1
 8000258:	601a      	str	r2, [r3, #0]
			break;
 800025a:	e035      	b.n	80002c8 <M_GPIO_void_SetPinDir+0x1c0>
			GPIOB_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <M_GPIO_void_SetPinDir+0x1d8>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	1dbb      	adds	r3, r7, #6
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	210f      	movs	r1, #15
 8000268:	4099      	lsls	r1, r3
 800026a:	000b      	movs	r3, r1
 800026c:	43db      	mvns	r3, r3
 800026e:	0019      	movs	r1, r3
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <M_GPIO_void_SetPinDir+0x1d8>)
 8000272:	400a      	ands	r2, r1
 8000274:	601a      	str	r2, [r3, #0]
			GPIOB_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 8000276:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <M_GPIO_void_SetPinDir+0x1d8>)
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	1d7b      	adds	r3, r7, #5
 800027c:	7819      	ldrb	r1, [r3, #0]
 800027e:	1dbb      	adds	r3, r7, #6
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	4099      	lsls	r1, r3
 8000286:	000b      	movs	r3, r1
 8000288:	0019      	movs	r1, r3
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <M_GPIO_void_SetPinDir+0x1d8>)
 800028c:	430a      	orrs	r2, r1
 800028e:	601a      	str	r2, [r3, #0]
			break;
 8000290:	e01a      	b.n	80002c8 <M_GPIO_void_SetPinDir+0x1c0>
			GPIOC_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <M_GPIO_void_SetPinDir+0x1dc>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	1dbb      	adds	r3, r7, #6
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	210f      	movs	r1, #15
 800029e:	4099      	lsls	r1, r3
 80002a0:	000b      	movs	r3, r1
 80002a2:	43db      	mvns	r3, r3
 80002a4:	0019      	movs	r1, r3
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <M_GPIO_void_SetPinDir+0x1dc>)
 80002a8:	400a      	ands	r2, r1
 80002aa:	601a      	str	r2, [r3, #0]
			GPIOC_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80002ac:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <M_GPIO_void_SetPinDir+0x1dc>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	1d7b      	adds	r3, r7, #5
 80002b2:	7819      	ldrb	r1, [r3, #0]
 80002b4:	1dbb      	adds	r3, r7, #6
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	4099      	lsls	r1, r3
 80002bc:	000b      	movs	r3, r1
 80002be:	0019      	movs	r1, r3
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <M_GPIO_void_SetPinDir+0x1dc>)
 80002c2:	430a      	orrs	r2, r1
 80002c4:	601a      	str	r2, [r3, #0]
			break;
 80002c6:	46c0      	nop			; (mov r8, r8)
}
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	46bd      	mov	sp, r7
 80002cc:	b003      	add	sp, #12
 80002ce:	bd90      	pop	{r4, r7, pc}
 80002d0:	40010800 	.word	0x40010800
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	40011000 	.word	0x40011000
 80002dc:	40010804 	.word	0x40010804
 80002e0:	40010c04 	.word	0x40010c04
 80002e4:	40011004 	.word	0x40011004

080002e8 <M_GPIO_void_SetPinValue>:
void M_GPIO_void_SetPinValue(u8 PortID , u8 PinID , u8 Value)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0004      	movs	r4, r0
 80002f0:	0008      	movs	r0, r1
 80002f2:	0011      	movs	r1, r2
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	1c22      	adds	r2, r4, #0
 80002f8:	701a      	strb	r2, [r3, #0]
 80002fa:	1dbb      	adds	r3, r7, #6
 80002fc:	1c02      	adds	r2, r0, #0
 80002fe:	701a      	strb	r2, [r3, #0]
 8000300:	1d7b      	adds	r3, r7, #5
 8000302:	1c0a      	adds	r2, r1, #0
 8000304:	701a      	strb	r2, [r3, #0]
	//Range Check
if(PortID < 3 && PinID < 16)
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b02      	cmp	r3, #2
 800030c:	d900      	bls.n	8000310 <M_GPIO_void_SetPinValue+0x28>
 800030e:	e069      	b.n	80003e4 <M_GPIO_void_SetPinValue+0xfc>
 8000310:	1dbb      	adds	r3, r7, #6
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b0f      	cmp	r3, #15
 8000316:	d865      	bhi.n	80003e4 <M_GPIO_void_SetPinValue+0xfc>
{
	if(Value == LOW)
 8000318:	1d7b      	adds	r3, r7, #5
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d130      	bne.n	8000382 <M_GPIO_void_SetPinValue+0x9a>
	{
		switch(PortID)
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d011      	beq.n	800034c <M_GPIO_void_SetPinValue+0x64>
 8000328:	2b02      	cmp	r3, #2
 800032a:	d01c      	beq.n	8000366 <M_GPIO_void_SetPinValue+0x7e>
 800032c:	2b00      	cmp	r3, #0
 800032e:	d000      	beq.n	8000332 <M_GPIO_void_SetPinValue+0x4a>
			SET_BIT(GPIOC_ODR , PinID);
			break;
		}
	}
}
}
 8000330:	e058      	b.n	80003e4 <M_GPIO_void_SetPinValue+0xfc>
			CLR_BIT(GPIOA_ODR , PinID);
 8000332:	4b2e      	ldr	r3, [pc, #184]	; (80003ec <M_GPIO_void_SetPinValue+0x104>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	1dbb      	adds	r3, r7, #6
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2101      	movs	r1, #1
 800033c:	4099      	lsls	r1, r3
 800033e:	000b      	movs	r3, r1
 8000340:	43db      	mvns	r3, r3
 8000342:	0019      	movs	r1, r3
 8000344:	4b29      	ldr	r3, [pc, #164]	; (80003ec <M_GPIO_void_SetPinValue+0x104>)
 8000346:	400a      	ands	r2, r1
 8000348:	601a      	str	r2, [r3, #0]
			break;
 800034a:	e04b      	b.n	80003e4 <M_GPIO_void_SetPinValue+0xfc>
			CLR_BIT(GPIOB_ODR , PinID);
 800034c:	4b28      	ldr	r3, [pc, #160]	; (80003f0 <M_GPIO_void_SetPinValue+0x108>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	1dbb      	adds	r3, r7, #6
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2101      	movs	r1, #1
 8000356:	4099      	lsls	r1, r3
 8000358:	000b      	movs	r3, r1
 800035a:	43db      	mvns	r3, r3
 800035c:	0019      	movs	r1, r3
 800035e:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <M_GPIO_void_SetPinValue+0x108>)
 8000360:	400a      	ands	r2, r1
 8000362:	601a      	str	r2, [r3, #0]
			break;
 8000364:	e03e      	b.n	80003e4 <M_GPIO_void_SetPinValue+0xfc>
			CLR_BIT(GPIOC_ODR , PinID);
 8000366:	4b23      	ldr	r3, [pc, #140]	; (80003f4 <M_GPIO_void_SetPinValue+0x10c>)
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	1dbb      	adds	r3, r7, #6
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2101      	movs	r1, #1
 8000370:	4099      	lsls	r1, r3
 8000372:	000b      	movs	r3, r1
 8000374:	43db      	mvns	r3, r3
 8000376:	0019      	movs	r1, r3
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <M_GPIO_void_SetPinValue+0x10c>)
 800037a:	400a      	ands	r2, r1
 800037c:	601a      	str	r2, [r3, #0]
			break;
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	e030      	b.n	80003e4 <M_GPIO_void_SetPinValue+0xfc>
	else if(Value == HIGH)
 8000382:	1d7b      	adds	r3, r7, #5
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d12c      	bne.n	80003e4 <M_GPIO_void_SetPinValue+0xfc>
		switch(PortID)
 800038a:	1dfb      	adds	r3, r7, #7
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d010      	beq.n	80003b4 <M_GPIO_void_SetPinValue+0xcc>
 8000392:	2b02      	cmp	r3, #2
 8000394:	d01a      	beq.n	80003cc <M_GPIO_void_SetPinValue+0xe4>
 8000396:	2b00      	cmp	r3, #0
 8000398:	d000      	beq.n	800039c <M_GPIO_void_SetPinValue+0xb4>
}
 800039a:	e023      	b.n	80003e4 <M_GPIO_void_SetPinValue+0xfc>
			SET_BIT(GPIOA_ODR , PinID);
 800039c:	4b13      	ldr	r3, [pc, #76]	; (80003ec <M_GPIO_void_SetPinValue+0x104>)
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	1dbb      	adds	r3, r7, #6
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2101      	movs	r1, #1
 80003a6:	4099      	lsls	r1, r3
 80003a8:	000b      	movs	r3, r1
 80003aa:	0019      	movs	r1, r3
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <M_GPIO_void_SetPinValue+0x104>)
 80003ae:	430a      	orrs	r2, r1
 80003b0:	601a      	str	r2, [r3, #0]
			break;
 80003b2:	e017      	b.n	80003e4 <M_GPIO_void_SetPinValue+0xfc>
			SET_BIT(GPIOB_ODR , PinID);
 80003b4:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <M_GPIO_void_SetPinValue+0x108>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	1dbb      	adds	r3, r7, #6
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2101      	movs	r1, #1
 80003be:	4099      	lsls	r1, r3
 80003c0:	000b      	movs	r3, r1
 80003c2:	0019      	movs	r1, r3
 80003c4:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <M_GPIO_void_SetPinValue+0x108>)
 80003c6:	430a      	orrs	r2, r1
 80003c8:	601a      	str	r2, [r3, #0]
			break;
 80003ca:	e00b      	b.n	80003e4 <M_GPIO_void_SetPinValue+0xfc>
			SET_BIT(GPIOC_ODR , PinID);
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <M_GPIO_void_SetPinValue+0x10c>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	1dbb      	adds	r3, r7, #6
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2101      	movs	r1, #1
 80003d6:	4099      	lsls	r1, r3
 80003d8:	000b      	movs	r3, r1
 80003da:	0019      	movs	r1, r3
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <M_GPIO_void_SetPinValue+0x10c>)
 80003de:	430a      	orrs	r2, r1
 80003e0:	601a      	str	r2, [r3, #0]
			break;
 80003e2:	46c0      	nop			; (mov r8, r8)
}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b003      	add	sp, #12
 80003ea:	bd90      	pop	{r4, r7, pc}
 80003ec:	4001080c 	.word	0x4001080c
 80003f0:	40010c0c 	.word	0x40010c0c
 80003f4:	4001100c 	.word	0x4001100c

080003f8 <_delay_ms>:
#include	"NVIC_int.h"
#include	"EXTI_interface.h"


void	_delay_ms(u32 Ticks)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	for(u32 i = 0; i < (Ticks * 500) ; i++)
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	e003      	b.n	800040e <_delay_ms+0x16>
	{
		asm("NOP");
 8000406:	46c0      	nop			; (mov r8, r8)
	for(u32 i = 0; i < (Ticks * 500) ; i++)
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	3301      	adds	r3, #1
 800040c:	60fb      	str	r3, [r7, #12]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	0013      	movs	r3, r2
 8000412:	015b      	lsls	r3, r3, #5
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	189b      	adds	r3, r3, r2
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	001a      	movs	r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	4293      	cmp	r3, r2
 8000422:	d3f0      	bcc.n	8000406 <_delay_ms+0xe>
	}
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b004      	add	sp, #16
 800042a:	bd80      	pop	{r7, pc}

0800042c <main>:

void	EXT0_INT(void);

int	main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	/*	Initialization Part		*/

	/*	Call Backs				*/
	EXTI_voidSetCallBack(EXT0_INT);
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <main+0x60>)
 8000432:	0018      	movs	r0, r3
 8000434:	f000 f8d0 	bl	80005d8 <EXTI_voidSetCallBack>
	
	/*	System Clk init			*/
	MRCC_voidSysClkInit();
 8000438:	f000 f92c 	bl	8000694 <MRCC_voidSysClkInit>
	
	/*	Toggle Led C13	GPIOC	*/
	/*	1- Enable Per Clk "RCC" Port C		*/
	MRCC_voidEnablePerClk(RCC_APB2,4);
 800043c:	2104      	movs	r1, #4
 800043e:	2002      	movs	r0, #2
 8000440:	f000 f944 	bl	80006cc <MRCC_voidEnablePerClk>
	/*	2- Enable Per Clk "RCC" Port A		*/
	MRCC_voidEnablePerClk(RCC_APB2,2);
 8000444:	2102      	movs	r1, #2
 8000446:	2002      	movs	r0, #2
 8000448:	f000 f940 	bl	80006cc <MRCC_voidEnablePerClk>
	
	/*	Direction for C13 is output Push Pull */
	M_GPIO_void_SetPinDir(PORTC_ID, PIN13_ID, OUT_2MHZ_PP);
 800044c:	2202      	movs	r2, #2
 800044e:	210d      	movs	r1, #13
 8000450:	2002      	movs	r0, #2
 8000452:	f7ff fe59 	bl	8000108 <M_GPIO_void_SetPinDir>
	
	/*	Direction for A0 is Input Floatin */
	M_GPIO_void_SetPinDir(PORTA_ID, PIN0_ID, IN_FLOATING);
 8000456:	2204      	movs	r2, #4
 8000458:	2100      	movs	r1, #0
 800045a:	2000      	movs	r0, #0
 800045c:	f7ff fe54 	bl	8000108 <M_GPIO_void_SetPinDir>
	// for internal pull up
	M_GPIO_void_SetPinValue(PORTA_ID,PIN0_ID,HIGH);
 8000460:	2201      	movs	r2, #1
 8000462:	2100      	movs	r1, #0
 8000464:	2000      	movs	r0, #0
 8000466:	f7ff ff3f 	bl	80002e8 <M_GPIO_void_SetPinValue>
	/*	NVIC Initialization		*/
	NVIC_void_Init();
 800046a:	f000 f8c5 	bl	80005f8 <NVIC_void_Init>
	
	/*	EXTI0 NVIC interrupt Enable 			*/
	NVIC_void_EnableInt(6);
 800046e:	2006      	movs	r0, #6
 8000470:	f000 f8ce 	bl	8000610 <NVIC_void_EnableInt>
	
	/*	EXTI0 Is in Group id = 3 and Sub Group id = 1	*/
	NVIC_void_Set_Periority(6,0b1101);
 8000474:	210d      	movs	r1, #13
 8000476:	2006      	movs	r0, #6
 8000478:	f000 f8f2 	bl	8000660 <NVIC_void_Set_Periority>

	/*	EXTI0 Peripheral Interrupt Enable 	(A0)		*/
	EXTI_voidEnableLine(0);
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f81d 	bl	80004bc <EXTI_voidEnableLine>
	EXTI_voidSetExtiEdge(0,EXTI_FALLING);
 8000482:	2102      	movs	r1, #2
 8000484:	2000      	movs	r0, #0
 8000486:	f000 f831 	bl	80004ec <EXTI_voidSetExtiEdge>
	
	while(1)
 800048a:	e7fe      	b.n	800048a <main+0x5e>
 800048c:	08000491 	.word	0x08000491

08000490 <EXT0_INT>:

	}
	return 0;
}
void	EXT0_INT(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
		/*	Toggle led */
	   M_GPIO_void_SetPinValue(PORTC_ID, PIN13_ID,LOW);
 8000494:	2200      	movs	r2, #0
 8000496:	210d      	movs	r1, #13
 8000498:	2002      	movs	r0, #2
 800049a:	f7ff ff25 	bl	80002e8 <M_GPIO_void_SetPinValue>
		_delay_ms(10);
 800049e:	200a      	movs	r0, #10
 80004a0:	f7ff ffaa 	bl	80003f8 <_delay_ms>
		M_GPIO_void_SetPinValue(PORTC_ID, PIN13_ID,HIGH);
 80004a4:	2201      	movs	r2, #1
 80004a6:	210d      	movs	r1, #13
 80004a8:	2002      	movs	r0, #2
 80004aa:	f7ff ff1d 	bl	80002e8 <M_GPIO_void_SetPinValue>
		_delay_ms(10);
 80004ae:	200a      	movs	r0, #10
 80004b0:	f7ff ffa2 	bl	80003f8 <_delay_ms>

}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <EXTI_voidEnableLine>:
{
	
}

void	EXTI_voidEnableLine(u8 ExtiLine)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	0002      	movs	r2, r0
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	701a      	strb	r2, [r3, #0]
	SET_BIT(EXTI -> IMR , ExtiLine);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <EXTI_voidEnableLine+0x2c>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2101      	movs	r1, #1
 80004d2:	4099      	lsls	r1, r3
 80004d4:	000b      	movs	r3, r1
 80004d6:	0019      	movs	r1, r3
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <EXTI_voidEnableLine+0x2c>)
 80004da:	430a      	orrs	r2, r1
 80004dc:	601a      	str	r2, [r3, #0]
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	40010400 	.word	0x40010400

080004ec <EXTI_voidSetExtiEdge>:
{
	CLR_BIT(EXTI -> IMR , ExtiLine);
}

void	EXTI_voidSetExtiEdge(u8 ExtiLine,u8 edge)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	0002      	movs	r2, r0
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	1dbb      	adds	r3, r7, #6
 80004fa:	1c0a      	adds	r2, r1, #0
 80004fc:	701a      	strb	r2, [r3, #0]
	switch(edge)
 80004fe:	1dbb      	adds	r3, r7, #6
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b02      	cmp	r3, #2
 8000504:	d01b      	beq.n	800053e <EXTI_voidSetExtiEdge+0x52>
 8000506:	2b03      	cmp	r3, #3
 8000508:	d031      	beq.n	800056e <EXTI_voidSetExtiEdge+0x82>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d146      	bne.n	800059c <EXTI_voidSetExtiEdge+0xb0>
	{
		case	EXTI_RISING	:		SET_BIT(EXTI -> RSTR,ExtiLine);	
 800050e:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 8000510:	689a      	ldr	r2, [r3, #8]
 8000512:	1dfb      	adds	r3, r7, #7
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2101      	movs	r1, #1
 8000518:	4099      	lsls	r1, r3
 800051a:	000b      	movs	r3, r1
 800051c:	0019      	movs	r1, r3
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 8000520:	430a      	orrs	r2, r1
 8000522:	609a      	str	r2, [r3, #8]
									CLR_BIT(EXTI -> FSTR,ExtiLine);	
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 8000526:	68da      	ldr	r2, [r3, #12]
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2101      	movs	r1, #1
 800052e:	4099      	lsls	r1, r3
 8000530:	000b      	movs	r3, r1
 8000532:	43db      	mvns	r3, r3
 8000534:	0019      	movs	r1, r3
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 8000538:	400a      	ands	r2, r1
 800053a:	60da      	str	r2, [r3, #12]
		break;
 800053c:	e046      	b.n	80005cc <EXTI_voidSetExtiEdge+0xe0>
		
		case	EXTI_FALLING:		SET_BIT(EXTI -> FSTR,ExtiLine);
 800053e:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 8000540:	68da      	ldr	r2, [r3, #12]
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2101      	movs	r1, #1
 8000548:	4099      	lsls	r1, r3
 800054a:	000b      	movs	r3, r1
 800054c:	0019      	movs	r1, r3
 800054e:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 8000550:	430a      	orrs	r2, r1
 8000552:	60da      	str	r2, [r3, #12]
									CLR_BIT(EXTI -> RSTR,ExtiLine);
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 8000556:	689a      	ldr	r2, [r3, #8]
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2101      	movs	r1, #1
 800055e:	4099      	lsls	r1, r3
 8000560:	000b      	movs	r3, r1
 8000562:	43db      	mvns	r3, r3
 8000564:	0019      	movs	r1, r3
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 8000568:	400a      	ands	r2, r1
 800056a:	609a      	str	r2, [r3, #8]
		break;
 800056c:	e02e      	b.n	80005cc <EXTI_voidSetExtiEdge+0xe0>
		
		case	EXTI_IOC	:		SET_BIT(EXTI -> RSTR,ExtiLine);
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 8000570:	689a      	ldr	r2, [r3, #8]
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2101      	movs	r1, #1
 8000578:	4099      	lsls	r1, r3
 800057a:	000b      	movs	r3, r1
 800057c:	0019      	movs	r1, r3
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 8000580:	430a      	orrs	r2, r1
 8000582:	609a      	str	r2, [r3, #8]
									SET_BIT(EXTI -> FSTR,ExtiLine);
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 8000586:	68da      	ldr	r2, [r3, #12]
 8000588:	1dfb      	adds	r3, r7, #7
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2101      	movs	r1, #1
 800058e:	4099      	lsls	r1, r3
 8000590:	000b      	movs	r3, r1
 8000592:	0019      	movs	r1, r3
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 8000596:	430a      	orrs	r2, r1
 8000598:	60da      	str	r2, [r3, #12]
		break;
 800059a:	e017      	b.n	80005cc <EXTI_voidSetExtiEdge+0xe0>
		default:
									CLR_BIT(EXTI -> RSTR,ExtiLine);
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2101      	movs	r1, #1
 80005a6:	4099      	lsls	r1, r3
 80005a8:	000b      	movs	r3, r1
 80005aa:	43db      	mvns	r3, r3
 80005ac:	0019      	movs	r1, r3
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 80005b0:	400a      	ands	r2, r1
 80005b2:	609a      	str	r2, [r3, #8]
									CLR_BIT(EXTI -> FSTR,ExtiLine);
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 80005b6:	68da      	ldr	r2, [r3, #12]
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2101      	movs	r1, #1
 80005be:	4099      	lsls	r1, r3
 80005c0:	000b      	movs	r3, r1
 80005c2:	43db      	mvns	r3, r3
 80005c4:	0019      	movs	r1, r3
 80005c6:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <EXTI_voidSetExtiEdge+0xe8>)
 80005c8:	400a      	ands	r2, r1
 80005ca:	60da      	str	r2, [r3, #12]
	}
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b002      	add	sp, #8
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40010400 	.word	0x40010400

080005d8 <EXTI_voidSetCallBack>:

void	EXTI_voidSetCallBack(void (*Pf) (void))
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	if(Pf != NULL)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <EXTI_voidSetCallBack+0x14>
	{
		EXTI0_CallBack = Pf; //Ahmed
 80005e6:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <EXTI_voidSetCallBack+0x1c>)
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	601a      	str	r2, [r3, #0]
	}
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b002      	add	sp, #8
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000001c 	.word	0x2000001c

080005f8 <NVIC_void_Init>:
static void (*EXTI0_CallBack) (void) = NULL;
static void (*EXTI1_CallBack) (void) = NULL;


void NVIC_void_Init()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
#ifndef SCB_AIRCR
#define  SCB_AIRCR    *((volatile u32*)(0xE000ED00+0x0C))
#endif
SCB_AIRCR	=	 NVIC_GRB_SUB_NUM;
 80005fc:	4b02      	ldr	r3, [pc, #8]	; (8000608 <NVIC_void_Init+0x10>)
 80005fe:	4a03      	ldr	r2, [pc, #12]	; (800060c <NVIC_void_Init+0x14>)
 8000600:	601a      	str	r2, [r3, #0]
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	e000ed0c 	.word	0xe000ed0c
 800060c:	5fa00500 	.word	0x5fa00500

08000610 <NVIC_void_EnableInt>:

void NVIC_void_EnableInt(u8 IntNum)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	0002      	movs	r2, r0
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	701a      	strb	r2, [r3, #0]
	if(IntNum<32)
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b1f      	cmp	r3, #31
 8000622:	d806      	bhi.n	8000632 <NVIC_void_EnableInt+0x22>
	{
		NVIC_ISER0=(1<< IntNum);
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2201      	movs	r2, #1
 800062a:	409a      	lsls	r2, r3
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <NVIC_void_EnableInt+0x48>)
 800062e:	601a      	str	r2, [r3, #0]
	else if(IntNum<64)
	{
		IntNum -=32;
			NVIC_ISER1=(1<<IntNum);
	}
}
 8000630:	e00e      	b.n	8000650 <NVIC_void_EnableInt+0x40>
	else if(IntNum<64)
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b3f      	cmp	r3, #63	; 0x3f
 8000638:	d80a      	bhi.n	8000650 <NVIC_void_EnableInt+0x40>
		IntNum -=32;
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	1dfa      	adds	r2, r7, #7
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	3a20      	subs	r2, #32
 8000642:	701a      	strb	r2, [r3, #0]
			NVIC_ISER1=(1<<IntNum);
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2201      	movs	r2, #1
 800064a:	409a      	lsls	r2, r3
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <NVIC_void_EnableInt+0x4c>)
 800064e:	601a      	str	r2, [r3, #0]
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b002      	add	sp, #8
 8000656:	bd80      	pop	{r7, pc}
 8000658:	e000e100 	.word	0xe000e100
 800065c:	e000e104 	.word	0xe000e104

08000660 <NVIC_void_Set_Periority>:
}


//NVIC_voidSetPriority(0,0b0111) /*Group 1 Sub 3*/
void NVIC_void_Set_Periority(u8 IntNum,u8 Periority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	0002      	movs	r2, r0
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	1dbb      	adds	r3, r7, #6
 800066e:	1c0a      	adds	r2, r1, #0
 8000670:	701a      	strb	r2, [r3, #0]
	NVIC_IPR[IntNum]=(Periority<<4);
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4a06      	ldr	r2, [pc, #24]	; (8000690 <NVIC_void_Set_Periority+0x30>)
 8000678:	4694      	mov	ip, r2
 800067a:	4463      	add	r3, ip
 800067c:	1dba      	adds	r2, r7, #6
 800067e:	7812      	ldrb	r2, [r2, #0]
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	701a      	strb	r2, [r3, #0]
}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	e000e400 	.word	0xe000e400

08000694 <MRCC_voidSysClkInit>:




void	MRCC_voidSysClkInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	#if			SYSTEM_CLK	==	RCC_HSI
				SET_BIT(RCC_CR,0);
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MRCC_voidSysClkInit+0x30>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MRCC_voidSysClkInit+0x30>)
 800069e:	2101      	movs	r1, #1
 80006a0:	430a      	orrs	r2, r1
 80006a2:	601a      	str	r2, [r3, #0]
				CLR_BIT(RCC_CFGR,0);
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MRCC_voidSysClkInit+0x34>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MRCC_voidSysClkInit+0x34>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	438a      	bics	r2, r1
 80006ae:	601a      	str	r2, [r3, #0]
				CLR_BIT(RCC_CFGR,1);
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <MRCC_voidSysClkInit+0x34>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <MRCC_voidSysClkInit+0x34>)
 80006b6:	2102      	movs	r1, #2
 80006b8:	438a      	bics	r2, r1
 80006ba:	601a      	str	r2, [r3, #0]
				CLR_BIT(RCC_CFGR,0);
				SET_BIT(RCC_CFGR,1);
	#else
		#error	"Wrong choice of RCC clock type"
	#endif
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40021004 	.word	0x40021004

080006cc <MRCC_voidEnablePerClk>:
void	MRCC_voidEnablePerClk(u8 PerBus,u8 PerNum)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	0002      	movs	r2, r0
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	1dbb      	adds	r3, r7, #6
 80006da:	1c0a      	adds	r2, r1, #0
 80006dc:	701a      	strb	r2, [r3, #0]
	/*	Range Check						*/
	if(PerNum<32)
 80006de:	1dbb      	adds	r3, r7, #6
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b1f      	cmp	r3, #31
 80006e4:	d82c      	bhi.n	8000740 <MRCC_voidEnablePerClk+0x74>
	{
		switch(PerBus)
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d010      	beq.n	8000710 <MRCC_voidEnablePerClk+0x44>
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d01a      	beq.n	8000728 <MRCC_voidEnablePerClk+0x5c>
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d000      	beq.n	80006f8 <MRCC_voidEnablePerClk+0x2c>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
		}
	}
	else
	{/*		Report Error 			*/}	
}
 80006f6:	e023      	b.n	8000740 <MRCC_voidEnablePerClk+0x74>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR ,PerNum);	break;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MRCC_voidEnablePerClk+0x7c>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	1dbb      	adds	r3, r7, #6
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2101      	movs	r1, #1
 8000702:	4099      	lsls	r1, r3
 8000704:	000b      	movs	r3, r1
 8000706:	0019      	movs	r1, r3
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MRCC_voidEnablePerClk+0x7c>)
 800070a:	430a      	orrs	r2, r1
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	e017      	b.n	8000740 <MRCC_voidEnablePerClk+0x74>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerNum);	break;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MRCC_voidEnablePerClk+0x80>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	1dbb      	adds	r3, r7, #6
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2101      	movs	r1, #1
 800071a:	4099      	lsls	r1, r3
 800071c:	000b      	movs	r3, r1
 800071e:	0019      	movs	r1, r3
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MRCC_voidEnablePerClk+0x80>)
 8000722:	430a      	orrs	r2, r1
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	e00b      	b.n	8000740 <MRCC_voidEnablePerClk+0x74>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MRCC_voidEnablePerClk+0x84>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	1dbb      	adds	r3, r7, #6
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2101      	movs	r1, #1
 8000732:	4099      	lsls	r1, r3
 8000734:	000b      	movs	r3, r1
 8000736:	0019      	movs	r1, r3
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <MRCC_voidEnablePerClk+0x84>)
 800073a:	430a      	orrs	r2, r1
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	46c0      	nop			; (mov r8, r8)
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b002      	add	sp, #8
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021014 	.word	0x40021014
 800074c:	4002101c 	.word	0x4002101c
 8000750:	40021018 	.word	0x40021018

08000754 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000756:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000758:	e000      	b.n	800075c <Reset_Handler+0x8>
 800075a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490d      	ldr	r1, [pc, #52]	; (8000794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0a      	ldr	r4, [pc, #40]	; (80007a0 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000782:	f000 f811 	bl	80007a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000786:	f7ff fe51 	bl	800042c <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   r0, =_estack
 800078c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000798:	08000810 	.word	0x08000810
  ldr r2, =_sbss
 800079c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007a0:	20000020 	.word	0x20000020

080007a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC_IRQHandler>
	...

080007a8 <__libc_init_array>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	2600      	movs	r6, #0
 80007ac:	4d0c      	ldr	r5, [pc, #48]	; (80007e0 <__libc_init_array+0x38>)
 80007ae:	4c0d      	ldr	r4, [pc, #52]	; (80007e4 <__libc_init_array+0x3c>)
 80007b0:	1b64      	subs	r4, r4, r5
 80007b2:	10a4      	asrs	r4, r4, #2
 80007b4:	42a6      	cmp	r6, r4
 80007b6:	d109      	bne.n	80007cc <__libc_init_array+0x24>
 80007b8:	2600      	movs	r6, #0
 80007ba:	f000 f819 	bl	80007f0 <_init>
 80007be:	4d0a      	ldr	r5, [pc, #40]	; (80007e8 <__libc_init_array+0x40>)
 80007c0:	4c0a      	ldr	r4, [pc, #40]	; (80007ec <__libc_init_array+0x44>)
 80007c2:	1b64      	subs	r4, r4, r5
 80007c4:	10a4      	asrs	r4, r4, #2
 80007c6:	42a6      	cmp	r6, r4
 80007c8:	d105      	bne.n	80007d6 <__libc_init_array+0x2e>
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	00b3      	lsls	r3, r6, #2
 80007ce:	58eb      	ldr	r3, [r5, r3]
 80007d0:	4798      	blx	r3
 80007d2:	3601      	adds	r6, #1
 80007d4:	e7ee      	b.n	80007b4 <__libc_init_array+0xc>
 80007d6:	00b3      	lsls	r3, r6, #2
 80007d8:	58eb      	ldr	r3, [r5, r3]
 80007da:	4798      	blx	r3
 80007dc:	3601      	adds	r6, #1
 80007de:	e7f2      	b.n	80007c6 <__libc_init_array+0x1e>
 80007e0:	08000808 	.word	0x08000808
 80007e4:	08000808 	.word	0x08000808
 80007e8:	08000808 	.word	0x08000808
 80007ec:	0800080c 	.word	0x0800080c

080007f0 <_init>:
 80007f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007f6:	bc08      	pop	{r3}
 80007f8:	469e      	mov	lr, r3
 80007fa:	4770      	bx	lr

080007fc <_fini>:
 80007fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000802:	bc08      	pop	{r3}
 8000804:	469e      	mov	lr, r3
 8000806:	4770      	bx	lr
