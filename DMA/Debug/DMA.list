
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000420  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e0  080004e8  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e0  080004e0  000104e8  2**0
                  CONTENTS
  4 .ARM          00000000  080004e0  080004e0  000104e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e0  080004e8  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e0  080004e0  000104e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004e4  080004e4  000104e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  080004e8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004e8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000104e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007ad  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003e7  00000000  00000000  00010cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000168  00000000  00000000  000110a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000110  00000000  00000000  00011210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000021d  00000000  00000000  00011320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000581  00000000  00000000  0001153d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000038f1  00000000  00000000  00011abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000153af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003a0  00000000  00000000  0001542c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080004c8 	.word	0x080004c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080004c8 	.word	0x080004c8

08000108 <main>:
#include	"DMA_interface.h"

u16 Count;

int	main(void)
{
 8000108:	b590      	push	{r4, r7, lr}
 800010a:	4c40      	ldr	r4, [pc, #256]	; (800020c <main+0x104>)
 800010c:	44a5      	add	sp, r4
 800010e:	af00      	add	r7, sp, #0
	/*	Initialization Part		*/
	u32 Arr1[1000];
	u32 Arr2[1000] = {0};
 8000110:	4b3f      	ldr	r3, [pc, #252]	; (8000210 <main+0x108>)
 8000112:	4a40      	ldr	r2, [pc, #256]	; (8000214 <main+0x10c>)
 8000114:	4694      	mov	ip, r2
 8000116:	44bc      	add	ip, r7
 8000118:	4463      	add	r3, ip
 800011a:	0018      	movs	r0, r3
 800011c:	23fa      	movs	r3, #250	; 0xfa
 800011e:	011b      	lsls	r3, r3, #4
 8000120:	001a      	movs	r2, r3
 8000122:	2100      	movs	r1, #0
 8000124:	f000 f9c8 	bl	80004b8 <memset>
	u32 Arr3[1000];
	u32 Arr4[1000] = {0};
 8000128:	4b3b      	ldr	r3, [pc, #236]	; (8000218 <main+0x110>)
 800012a:	4a3a      	ldr	r2, [pc, #232]	; (8000214 <main+0x10c>)
 800012c:	4694      	mov	ip, r2
 800012e:	44bc      	add	ip, r7
 8000130:	4463      	add	r3, ip
 8000132:	0018      	movs	r0, r3
 8000134:	23fa      	movs	r3, #250	; 0xfa
 8000136:	011b      	lsls	r3, r3, #4
 8000138:	001a      	movs	r2, r3
 800013a:	2100      	movs	r1, #0
 800013c:	f000 f9bc 	bl	80004b8 <memset>
	/*	Initialize the Array    */
	for(u16 i = 0; i<1000;i++)
 8000140:	4b36      	ldr	r3, [pc, #216]	; (800021c <main+0x114>)
 8000142:	18fb      	adds	r3, r7, r3
 8000144:	2200      	movs	r2, #0
 8000146:	801a      	strh	r2, [r3, #0]
 8000148:	e01b      	b.n	8000182 <main+0x7a>
	{
		Arr1[i] = i;
 800014a:	4834      	ldr	r0, [pc, #208]	; (800021c <main+0x114>)
 800014c:	183b      	adds	r3, r7, r0
 800014e:	881a      	ldrh	r2, [r3, #0]
 8000150:	183b      	adds	r3, r7, r0
 8000152:	8819      	ldrh	r1, [r3, #0]
 8000154:	4b32      	ldr	r3, [pc, #200]	; (8000220 <main+0x118>)
 8000156:	4c2f      	ldr	r4, [pc, #188]	; (8000214 <main+0x10c>)
 8000158:	46a4      	mov	ip, r4
 800015a:	44bc      	add	ip, r7
 800015c:	4463      	add	r3, ip
 800015e:	0092      	lsls	r2, r2, #2
 8000160:	50d1      	str	r1, [r2, r3]
		Arr3[i] = i;
 8000162:	183b      	adds	r3, r7, r0
 8000164:	881a      	ldrh	r2, [r3, #0]
 8000166:	183b      	adds	r3, r7, r0
 8000168:	8819      	ldrh	r1, [r3, #0]
 800016a:	4b2e      	ldr	r3, [pc, #184]	; (8000224 <main+0x11c>)
 800016c:	4c29      	ldr	r4, [pc, #164]	; (8000214 <main+0x10c>)
 800016e:	46a4      	mov	ip, r4
 8000170:	44bc      	add	ip, r7
 8000172:	4463      	add	r3, ip
 8000174:	0092      	lsls	r2, r2, #2
 8000176:	50d1      	str	r1, [r2, r3]
	for(u16 i = 0; i<1000;i++)
 8000178:	183b      	adds	r3, r7, r0
 800017a:	881a      	ldrh	r2, [r3, #0]
 800017c:	183b      	adds	r3, r7, r0
 800017e:	3201      	adds	r2, #1
 8000180:	801a      	strh	r2, [r3, #0]
 8000182:	4b26      	ldr	r3, [pc, #152]	; (800021c <main+0x114>)
 8000184:	18fb      	adds	r3, r7, r3
 8000186:	881b      	ldrh	r3, [r3, #0]
 8000188:	4a27      	ldr	r2, [pc, #156]	; (8000228 <main+0x120>)
 800018a:	4293      	cmp	r3, r2
 800018c:	d9dd      	bls.n	800014a <main+0x42>
	}
	/*	System Clk init			*/
	MRCC_voidSysClkInit();
 800018e:	f000 f8b7 	bl	8000300 <MRCC_voidSysClkInit>
	
	/*	Toggle Led C13	GPIOC	*/
	/*	1- Enable Per Clk "RCC" Port C		*/
	MRCC_voidEnablePerClk(RCC_APB2,4);
 8000192:	2104      	movs	r1, #4
 8000194:	2002      	movs	r0, #2
 8000196:	f000 f8cf 	bl	8000338 <MRCC_voidEnablePerClk>
	/*	2- Enable Per Clk "RCC" DMA1		*/
	MRCC_voidEnablePerClk(RCC_AHB,0);
 800019a:	2100      	movs	r1, #0
 800019c:	2000      	movs	r0, #0
 800019e:	f000 f8cb 	bl	8000338 <MRCC_voidEnablePerClk>
	/*	Direction for C13 is output Push Pull */
	/*MDIO_voidSetPinDirection(PORTC, PIN13, OUT_2MHZ_PP);*/
	
		
	/*	NVIC Initialization		*/
	NVIC_void_Init();
 80001a2:	f000 f879 	bl	8000298 <NVIC_void_Init>
	
	/*	DMA1 Channel1 NVIC interrupt Enable 	*/
	NVIC_void_EnableInt(11);
 80001a6:	200b      	movs	r0, #11
 80001a8:	f000 f882 	bl	80002b0 <NVIC_void_EnableInt>
	
	/*	DMA1 initilaization	*/
	DMA1_voidChannelInit();
 80001ac:	f000 f844 	bl	8000238 <DMA1_voidChannelInit>
	
	DMA1_voidChannelStart(Arr1,Arr2,1000);
 80001b0:	23fa      	movs	r3, #250	; 0xfa
 80001b2:	009a      	lsls	r2, r3, #2
 80001b4:	4b1d      	ldr	r3, [pc, #116]	; (800022c <main+0x124>)
 80001b6:	18f9      	adds	r1, r7, r3
 80001b8:	4b1d      	ldr	r3, [pc, #116]	; (8000230 <main+0x128>)
 80001ba:	18fb      	adds	r3, r7, r3
 80001bc:	0018      	movs	r0, r3
 80001be:	f000 f847 	bl	8000250 <DMA1_voidChannelStart>
	
	for(Count = 0 ; Count<1000 ; Count++)
 80001c2:	4b1c      	ldr	r3, [pc, #112]	; (8000234 <main+0x12c>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	801a      	strh	r2, [r3, #0]
 80001c8:	e019      	b.n	80001fe <main+0xf6>
	{
		Arr4[Count] = Arr3[Count];
 80001ca:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <main+0x12c>)
 80001cc:	881b      	ldrh	r3, [r3, #0]
 80001ce:	001a      	movs	r2, r3
 80001d0:	4b18      	ldr	r3, [pc, #96]	; (8000234 <main+0x12c>)
 80001d2:	881b      	ldrh	r3, [r3, #0]
 80001d4:	0018      	movs	r0, r3
 80001d6:	4b13      	ldr	r3, [pc, #76]	; (8000224 <main+0x11c>)
 80001d8:	490e      	ldr	r1, [pc, #56]	; (8000214 <main+0x10c>)
 80001da:	468c      	mov	ip, r1
 80001dc:	44bc      	add	ip, r7
 80001de:	4463      	add	r3, ip
 80001e0:	0092      	lsls	r2, r2, #2
 80001e2:	58d1      	ldr	r1, [r2, r3]
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <main+0x110>)
 80001e6:	4a0b      	ldr	r2, [pc, #44]	; (8000214 <main+0x10c>)
 80001e8:	4694      	mov	ip, r2
 80001ea:	44bc      	add	ip, r7
 80001ec:	4463      	add	r3, ip
 80001ee:	0082      	lsls	r2, r0, #2
 80001f0:	50d1      	str	r1, [r2, r3]
	for(Count = 0 ; Count<1000 ; Count++)
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <main+0x12c>)
 80001f4:	881b      	ldrh	r3, [r3, #0]
 80001f6:	3301      	adds	r3, #1
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <main+0x12c>)
 80001fc:	801a      	strh	r2, [r3, #0]
 80001fe:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <main+0x12c>)
 8000200:	881b      	ldrh	r3, [r3, #0]
 8000202:	4a09      	ldr	r2, [pc, #36]	; (8000228 <main+0x120>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d9e0      	bls.n	80001ca <main+0xc2>
	}
	
	while(1)
 8000208:	e7fe      	b.n	8000208 <main+0x100>
 800020a:	46c0      	nop			; (mov r8, r8)
 800020c:	ffffc174 	.word	0xffffc174
 8000210:	ffffe0bc 	.word	0xffffe0bc
 8000214:	00003e88 	.word	0x00003e88
 8000218:	ffffc17c 	.word	0xffffc17c
 800021c:	00003e86 	.word	0x00003e86
 8000220:	fffff05c 	.word	0xfffff05c
 8000224:	ffffd11c 	.word	0xffffd11c
 8000228:	000003e7 	.word	0x000003e7
 800022c:	00001f44 	.word	0x00001f44
 8000230:	00002ee4 	.word	0x00002ee4
 8000234:	20000022 	.word	0x20000022

08000238 <DMA1_voidChannelInit>:
#include"DMA_interface.h"



void	DMA1_voidChannelInit(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
		5- No circuler
		6- Direction Memory to memory (DIR = 0 , Src Peripheral, Des Memory) 
		7- Transfere complete interrupt
		0- Disable the channel
	*/
	DMA1 -> Channel[0].CCR = 0x00007AC2;
 800023c:	4b02      	ldr	r3, [pc, #8]	; (8000248 <DMA1_voidChannelInit+0x10>)
 800023e:	4a03      	ldr	r2, [pc, #12]	; (800024c <DMA1_voidChannelInit+0x14>)
 8000240:	609a      	str	r2, [r3, #8]
}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40020000 	.word	0x40020000
 800024c:	00007ac2 	.word	0x00007ac2

08000250 <DMA1_voidChannelStart>:
void	DMA1_voidChannelStart(u32 * SrcAdd,u32 * DesAdd,u16 BlockLength)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	1dbb      	adds	r3, r7, #6
 800025c:	801a      	strh	r2, [r3, #0]
	/*		Disable the Channel			*/
	CLR_BIT((DMA1 -> Channel[0].CCR),0);
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <DMA1_voidChannelStart+0x44>)
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <DMA1_voidChannelStart+0x44>)
 8000264:	2101      	movs	r1, #1
 8000266:	438a      	bics	r2, r1
 8000268:	609a      	str	r2, [r3, #8]
	
	DMA1 -> Channel[0].CPAR = SrcAdd;
 800026a:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <DMA1_voidChannelStart+0x44>)
 800026c:	68fa      	ldr	r2, [r7, #12]
 800026e:	611a      	str	r2, [r3, #16]
	DMA1 -> Channel[0].CMAR = DesAdd;
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <DMA1_voidChannelStart+0x44>)
 8000272:	68ba      	ldr	r2, [r7, #8]
 8000274:	615a      	str	r2, [r3, #20]
	DMA1 -> Channel[0].CNDTR = BlockLength;
 8000276:	4b07      	ldr	r3, [pc, #28]	; (8000294 <DMA1_voidChannelStart+0x44>)
 8000278:	1dba      	adds	r2, r7, #6
 800027a:	8812      	ldrh	r2, [r2, #0]
 800027c:	60da      	str	r2, [r3, #12]
	
	/*		Enable the Channel			*/
	SET_BIT((DMA1 -> Channel[0].CCR),0);
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <DMA1_voidChannelStart+0x44>)
 8000280:	689a      	ldr	r2, [r3, #8]
 8000282:	4b04      	ldr	r3, [pc, #16]	; (8000294 <DMA1_voidChannelStart+0x44>)
 8000284:	2101      	movs	r1, #1
 8000286:	430a      	orrs	r2, r1
 8000288:	609a      	str	r2, [r3, #8]
}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	b004      	add	sp, #16
 8000290:	bd80      	pop	{r7, pc}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	40020000 	.word	0x40020000

08000298 <NVIC_void_Init>:
static void (*EXTI0_CallBack) (void) = NULL;
static void (*EXTI1_CallBack) (void) = NULL;


void NVIC_void_Init()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
#ifndef SCB_AIRCR
#define  SCB_AIRCR    *((volatile u32*)(0xE000ED00+0x0C))
#endif
SCB_AIRCR	=	 NVIC_GRB_SUB_NUM;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <NVIC_void_Init+0x10>)
 800029e:	4a03      	ldr	r2, [pc, #12]	; (80002ac <NVIC_void_Init+0x14>)
 80002a0:	601a      	str	r2, [r3, #0]
}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	e000ed0c 	.word	0xe000ed0c
 80002ac:	5fa00500 	.word	0x5fa00500

080002b0 <NVIC_void_EnableInt>:

void NVIC_void_EnableInt(u8 IntNum)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	0002      	movs	r2, r0
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	701a      	strb	r2, [r3, #0]
	if(IntNum<32)
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b1f      	cmp	r3, #31
 80002c2:	d806      	bhi.n	80002d2 <NVIC_void_EnableInt+0x22>
	{
		NVIC_ISER0=(1<< IntNum);
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2201      	movs	r2, #1
 80002ca:	409a      	lsls	r2, r3
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <NVIC_void_EnableInt+0x48>)
 80002ce:	601a      	str	r2, [r3, #0]
	else if(IntNum<64)
	{
		IntNum -=32;
			NVIC_ISER1=(1<<IntNum);
	}
}
 80002d0:	e00e      	b.n	80002f0 <NVIC_void_EnableInt+0x40>
	else if(IntNum<64)
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b3f      	cmp	r3, #63	; 0x3f
 80002d8:	d80a      	bhi.n	80002f0 <NVIC_void_EnableInt+0x40>
		IntNum -=32;
 80002da:	1dfb      	adds	r3, r7, #7
 80002dc:	1dfa      	adds	r2, r7, #7
 80002de:	7812      	ldrb	r2, [r2, #0]
 80002e0:	3a20      	subs	r2, #32
 80002e2:	701a      	strb	r2, [r3, #0]
			NVIC_ISER1=(1<<IntNum);
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2201      	movs	r2, #1
 80002ea:	409a      	lsls	r2, r3
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <NVIC_void_EnableInt+0x4c>)
 80002ee:	601a      	str	r2, [r3, #0]
}
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b002      	add	sp, #8
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000e104 	.word	0xe000e104

08000300 <MRCC_voidSysClkInit>:




void	MRCC_voidSysClkInit(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	#if			SYSTEM_CLK	==	RCC_HSI
				SET_BIT(RCC_CR,0);
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <MRCC_voidSysClkInit+0x30>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MRCC_voidSysClkInit+0x30>)
 800030a:	2101      	movs	r1, #1
 800030c:	430a      	orrs	r2, r1
 800030e:	601a      	str	r2, [r3, #0]
				CLR_BIT(RCC_CFGR,0);
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MRCC_voidSysClkInit+0x34>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <MRCC_voidSysClkInit+0x34>)
 8000316:	2101      	movs	r1, #1
 8000318:	438a      	bics	r2, r1
 800031a:	601a      	str	r2, [r3, #0]
				CLR_BIT(RCC_CFGR,1);
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <MRCC_voidSysClkInit+0x34>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <MRCC_voidSysClkInit+0x34>)
 8000322:	2102      	movs	r1, #2
 8000324:	438a      	bics	r2, r1
 8000326:	601a      	str	r2, [r3, #0]
				CLR_BIT(RCC_CFGR,0);
				SET_BIT(RCC_CFGR,1);
	#else
		#error	"Wrong choice of RCC clock type"
	#endif
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	40021000 	.word	0x40021000
 8000334:	40021004 	.word	0x40021004

08000338 <MRCC_voidEnablePerClk>:
void	MRCC_voidEnablePerClk(u8 PerBus,u8 PerNum)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	0002      	movs	r2, r0
 8000340:	1dfb      	adds	r3, r7, #7
 8000342:	701a      	strb	r2, [r3, #0]
 8000344:	1dbb      	adds	r3, r7, #6
 8000346:	1c0a      	adds	r2, r1, #0
 8000348:	701a      	strb	r2, [r3, #0]
	/*	Range Check						*/
	if(PerNum<32)
 800034a:	1dbb      	adds	r3, r7, #6
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b1f      	cmp	r3, #31
 8000350:	d82c      	bhi.n	80003ac <MRCC_voidEnablePerClk+0x74>
	{
		switch(PerBus)
 8000352:	1dfb      	adds	r3, r7, #7
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d010      	beq.n	800037c <MRCC_voidEnablePerClk+0x44>
 800035a:	2b02      	cmp	r3, #2
 800035c:	d01a      	beq.n	8000394 <MRCC_voidEnablePerClk+0x5c>
 800035e:	2b00      	cmp	r3, #0
 8000360:	d000      	beq.n	8000364 <MRCC_voidEnablePerClk+0x2c>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
		}
	}
	else
	{/*		Report Error 			*/}	
}
 8000362:	e023      	b.n	80003ac <MRCC_voidEnablePerClk+0x74>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR ,PerNum);	break;
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <MRCC_voidEnablePerClk+0x7c>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	1dbb      	adds	r3, r7, #6
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2101      	movs	r1, #1
 800036e:	4099      	lsls	r1, r3
 8000370:	000b      	movs	r3, r1
 8000372:	0019      	movs	r1, r3
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MRCC_voidEnablePerClk+0x7c>)
 8000376:	430a      	orrs	r2, r1
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	e017      	b.n	80003ac <MRCC_voidEnablePerClk+0x74>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerNum);	break;
 800037c:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MRCC_voidEnablePerClk+0x80>)
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	1dbb      	adds	r3, r7, #6
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2101      	movs	r1, #1
 8000386:	4099      	lsls	r1, r3
 8000388:	000b      	movs	r3, r1
 800038a:	0019      	movs	r1, r3
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <MRCC_voidEnablePerClk+0x80>)
 800038e:	430a      	orrs	r2, r1
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	e00b      	b.n	80003ac <MRCC_voidEnablePerClk+0x74>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MRCC_voidEnablePerClk+0x84>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	1dbb      	adds	r3, r7, #6
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2101      	movs	r1, #1
 800039e:	4099      	lsls	r1, r3
 80003a0:	000b      	movs	r3, r1
 80003a2:	0019      	movs	r1, r3
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <MRCC_voidEnablePerClk+0x84>)
 80003a6:	430a      	orrs	r2, r1
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	46c0      	nop			; (mov r8, r8)
}
 80003ac:	46c0      	nop			; (mov r8, r8)
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b002      	add	sp, #8
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021014 	.word	0x40021014
 80003b8:	4002101c 	.word	0x4002101c
 80003bc:	40021018 	.word	0x40021018

080003c0 <SysTick_Handler>:
	Local_u32RemainingTime =  (STK -> VAL);
	return Local_u32RemainingTime;
}
//Core Peripheral
void	SysTick_Handler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
	u8 Local_u8Temp ;
	if(STK_u8ModeOfInterval == STK_SINGLE_INTERVAL)
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <SysTick_Handler+0x50>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d111      	bne.n	80003f2 <SysTick_Handler+0x32>
	{
		/*	1- Disable the Interrupt 	*/
			CLR_BIT(STK -> CTRL , 1);
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <SysTick_Handler+0x54>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <SysTick_Handler+0x54>)
 80003d4:	2102      	movs	r1, #2
 80003d6:	438a      	bics	r2, r1
 80003d8:	601a      	str	r2, [r3, #0]
		/*	2- Stop the timer			*/
			CLR_BIT(STK -> CTRL , 0);
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <SysTick_Handler+0x54>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <SysTick_Handler+0x54>)
 80003e0:	2101      	movs	r1, #1
 80003e2:	438a      	bics	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]
			STK -> LOAD	= 0;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <SysTick_Handler+0x54>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	605a      	str	r2, [r3, #4]
			STK -> VAL	= 0;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <SysTick_Handler+0x54>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
	}
	SysTick_CallBack();
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <SysTick_Handler+0x58>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4798      	blx	r3
	/*	Clear Interrupt Flag by reading the Flag */
	Local_u8Temp	=	GET_BIT(STK -> CTRL , 16);
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <SysTick_Handler+0x54>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	0c1b      	lsrs	r3, r3, #16
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	2101      	movs	r1, #1
 8000404:	400a      	ands	r2, r1
 8000406:	701a      	strb	r2, [r3, #0]
}
 8000408:	46c0      	nop			; (mov r8, r8)
 800040a:	46bd      	mov	sp, r7
 800040c:	b002      	add	sp, #8
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000020 	.word	0x20000020
 8000414:	e000e010 	.word	0xe000e010
 8000418:	2000001c 	.word	0x2000001c

0800041c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000420:	e000      	b.n	8000424 <Reset_Handler+0x8>
 8000422:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000424:	480c      	ldr	r0, [pc, #48]	; (8000458 <LoopForever+0x6>)
  ldr r1, =_edata
 8000426:	490d      	ldr	r1, [pc, #52]	; (800045c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000428:	4a0d      	ldr	r2, [pc, #52]	; (8000460 <LoopForever+0xe>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800042c:	e002      	b.n	8000434 <LoopCopyDataInit>

0800042e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000432:	3304      	adds	r3, #4

08000434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000438:	d3f9      	bcc.n	800042e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043a:	4a0a      	ldr	r2, [pc, #40]	; (8000464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800043c:	4c0a      	ldr	r4, [pc, #40]	; (8000468 <LoopForever+0x16>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000440:	e001      	b.n	8000446 <LoopFillZerobss>

08000442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000444:	3204      	adds	r2, #4

08000446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000448:	d3fb      	bcc.n	8000442 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044a:	f000 f811 	bl	8000470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044e:	f7ff fe5b 	bl	8000108 <main>

08000452 <LoopForever>:

LoopForever:
    b LoopForever
 8000452:	e7fe      	b.n	8000452 <LoopForever>
  ldr   r0, =_estack
 8000454:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800045c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000460:	080004e8 	.word	0x080004e8
  ldr r2, =_sbss
 8000464:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000468:	20000024 	.word	0x20000024

0800046c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800046c:	e7fe      	b.n	800046c <ADC_IRQHandler>
	...

08000470 <__libc_init_array>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	2600      	movs	r6, #0
 8000474:	4d0c      	ldr	r5, [pc, #48]	; (80004a8 <__libc_init_array+0x38>)
 8000476:	4c0d      	ldr	r4, [pc, #52]	; (80004ac <__libc_init_array+0x3c>)
 8000478:	1b64      	subs	r4, r4, r5
 800047a:	10a4      	asrs	r4, r4, #2
 800047c:	42a6      	cmp	r6, r4
 800047e:	d109      	bne.n	8000494 <__libc_init_array+0x24>
 8000480:	2600      	movs	r6, #0
 8000482:	f000 f821 	bl	80004c8 <_init>
 8000486:	4d0a      	ldr	r5, [pc, #40]	; (80004b0 <__libc_init_array+0x40>)
 8000488:	4c0a      	ldr	r4, [pc, #40]	; (80004b4 <__libc_init_array+0x44>)
 800048a:	1b64      	subs	r4, r4, r5
 800048c:	10a4      	asrs	r4, r4, #2
 800048e:	42a6      	cmp	r6, r4
 8000490:	d105      	bne.n	800049e <__libc_init_array+0x2e>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	00b3      	lsls	r3, r6, #2
 8000496:	58eb      	ldr	r3, [r5, r3]
 8000498:	4798      	blx	r3
 800049a:	3601      	adds	r6, #1
 800049c:	e7ee      	b.n	800047c <__libc_init_array+0xc>
 800049e:	00b3      	lsls	r3, r6, #2
 80004a0:	58eb      	ldr	r3, [r5, r3]
 80004a2:	4798      	blx	r3
 80004a4:	3601      	adds	r6, #1
 80004a6:	e7f2      	b.n	800048e <__libc_init_array+0x1e>
 80004a8:	080004e0 	.word	0x080004e0
 80004ac:	080004e0 	.word	0x080004e0
 80004b0:	080004e0 	.word	0x080004e0
 80004b4:	080004e4 	.word	0x080004e4

080004b8 <memset>:
 80004b8:	0003      	movs	r3, r0
 80004ba:	1812      	adds	r2, r2, r0
 80004bc:	4293      	cmp	r3, r2
 80004be:	d100      	bne.n	80004c2 <memset+0xa>
 80004c0:	4770      	bx	lr
 80004c2:	7019      	strb	r1, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	e7f9      	b.n	80004bc <memset+0x4>

080004c8 <_init>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr

080004d4 <_fini>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr
